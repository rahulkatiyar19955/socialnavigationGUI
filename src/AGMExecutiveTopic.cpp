//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `AGMExecutiveTopic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <AGMExecutiveTopic.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutiveTopic::AGMExecutiveTopic"
};
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ops[] =
{
    "edgeUpdated",
    "edgesUpdated",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "selfEdgeAdded",
    "selfEdgeDeleted",
    "structuralChange",
    "symbolUpdated",
    "symbolsUpdated"
};
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgeUpdated_name = "edgeUpdated";
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgesUpdated_name = "edgesUpdated";
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeAdded_name = "selfEdgeAdded";
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeDeleted_name = "selfEdgeDeleted";
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_structuralChange_name = "structuralChange";
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolUpdated_name = "symbolUpdated";
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolsUpdated_name = "symbolsUpdated";

}

bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids + 2, s);
}

::std::vector<::std::string>
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids[0], &iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids[2]);
}

::std::string
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompAGMExecutiveTopic::AGMExecutiveTopic";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_edgeUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Edge iceP_modification;
    istr->readAll(iceP_modification);
    inS.endReadParams();
    this->edgeUpdated(::std::move(iceP_modification), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_edgesUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::EdgeSequence iceP_modifications;
    istr->readAll(iceP_modifications);
    inS.endReadParams();
    this->edgesUpdated(::std::move(iceP_modifications), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_selfEdgeAdded(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_nodeid;
    ::std::string iceP_edgeType;
    ::RoboCompAGMWorldModel::StringDictionary iceP_attributes;
    istr->readAll(iceP_nodeid, iceP_edgeType, iceP_attributes);
    inS.endReadParams();
    this->selfEdgeAdded(iceP_nodeid, ::std::move(iceP_edgeType), ::std::move(iceP_attributes), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_selfEdgeDeleted(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_nodeid;
    ::std::string iceP_edgeType;
    istr->readAll(iceP_nodeid, iceP_edgeType);
    inS.endReadParams();
    this->selfEdgeDeleted(iceP_nodeid, ::std::move(iceP_edgeType), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_structuralChange(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::World iceP_w;
    istr->readAll(iceP_w);
    inS.endReadParams();
    this->structuralChange(::std::move(iceP_w), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_symbolUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Node iceP_modification;
    istr->readAll(iceP_modification);
    inS.endReadParams();
    this->symbolUpdated(::std::move(iceP_modification), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_symbolsUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::NodeSequence iceP_modifications;
    istr->readAll(iceP_modifications);
    inS.endReadParams();
    this->symbolsUpdated(::std::move(iceP_modifications), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ops, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ops)
    {
        case 0:
        {
            return _iceD_edgeUpdated(in, current);
        }
        case 1:
        {
            return _iceD_edgesUpdated(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_selfEdgeAdded(in, current);
        }
        case 7:
        {
            return _iceD_selfEdgeDeleted(in, current);
        }
        case 8:
        {
            return _iceD_structuralChange(in, current);
        }
        case 9:
        {
            return _iceD_symbolUpdated(in, current);
        }
        case 10:
        {
            return _iceD_symbolsUpdated(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgeUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgeUpdated_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_modification);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgesUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgesUpdated_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_modifications);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeAdded(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeAdded_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_nodeid, iceP_edgeType, iceP_attributes);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeDeleted(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeDeleted_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_nodeid, iceP_edgeType);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_structuralChange(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_structuralChange_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_w);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolUpdated_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_modification);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolsUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolsUpdated_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_modifications);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_newInstance() const
{
    return ::IceInternal::createProxy<AGMExecutiveTopicPrx>();
}
/// \endcond

const ::std::string&
RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::ice_staticId()
{
    return AGMExecutiveTopic::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgeUpdated_name = "edgeUpdated";

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgesUpdated_name = "edgesUpdated";

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeAdded_name = "selfEdgeAdded";

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeDeleted_name = "selfEdgeDeleted";

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_structuralChange_name = "structuralChange";

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolUpdated_name = "symbolUpdated";

const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolsUpdated_name = "symbolsUpdated";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutiveTopic::upCast(AGMExecutiveTopic* p) { return p; }

void
::IceProxy::RoboCompAGMExecutiveTopic::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< AGMExecutiveTopic>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new AGMExecutiveTopic;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceI_begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgeUpdated_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgeUpdated_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_modification);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgeUpdated_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::end_edgeUpdated(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgeUpdated_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceI_begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgesUpdated_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgesUpdated_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_modifications);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgesUpdated_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::end_edgesUpdated(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_edgesUpdated_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceI_begin_selfEdgeAdded(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeAdded_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeAdded_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_nodeid);
        ostr->write(iceP_edgeType);
        ostr->write(iceP_attributes);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeAdded_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::end_selfEdgeAdded(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeAdded_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceI_begin_selfEdgeDeleted(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeDeleted_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeDeleted_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_nodeid);
        ostr->write(iceP_edgeType);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeDeleted_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::end_selfEdgeDeleted(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_selfEdgeDeleted_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceI_begin_structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_structuralChange_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_structuralChange_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_w);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_structuralChange_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::end_structuralChange(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_structuralChange_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceI_begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolUpdated_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolUpdated_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_modification);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolUpdated_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::end_symbolUpdated(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolUpdated_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceI_begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolsUpdated_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolsUpdated_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_modifications);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolsUpdated_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::end_symbolsUpdated(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_symbolsUpdated_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_newInstance() const
{
    return new AGMExecutiveTopic;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_staticId()
{
    return ::RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_staticId();
}

RoboCompAGMExecutiveTopic::AGMExecutiveTopic::~AGMExecutiveTopic()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompAGMExecutiveTopic::upCast(AGMExecutiveTopic* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutiveTopic::AGMExecutiveTopic"
};

}

bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids[0], &iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids[2]);
}

const ::std::string&
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompAGMExecutiveTopic::AGMExecutiveTopic";
    return typeId;
#else
    return iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_edgeUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Edge iceP_modification;
    istr->read(iceP_modification);
    inS.endReadParams();
    this->edgeUpdated(iceP_modification, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_edgesUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::EdgeSequence iceP_modifications;
    istr->read(iceP_modifications);
    inS.endReadParams();
    this->edgesUpdated(iceP_modifications, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_selfEdgeAdded(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_nodeid;
    ::std::string iceP_edgeType;
    ::RoboCompAGMWorldModel::StringDictionary iceP_attributes;
    istr->read(iceP_nodeid);
    istr->read(iceP_edgeType);
    istr->read(iceP_attributes);
    inS.endReadParams();
    this->selfEdgeAdded(iceP_nodeid, iceP_edgeType, iceP_attributes, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_selfEdgeDeleted(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_nodeid;
    ::std::string iceP_edgeType;
    istr->read(iceP_nodeid);
    istr->read(iceP_edgeType);
    inS.endReadParams();
    this->selfEdgeDeleted(iceP_nodeid, iceP_edgeType, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_structuralChange(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::World iceP_w;
    istr->read(iceP_w);
    inS.endReadParams();
    this->structuralChange(iceP_w, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_symbolUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Node iceP_modification;
    istr->read(iceP_modification);
    inS.endReadParams();
    this->symbolUpdated(iceP_modification, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceD_symbolsUpdated(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::NodeSequence iceP_modifications;
    istr->read(iceP_modifications);
    inS.endReadParams();
    this->symbolsUpdated(iceP_modifications, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_all[] =
{
    "edgeUpdated",
    "edgesUpdated",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "selfEdgeAdded",
    "selfEdgeDeleted",
    "structuralChange",
    "symbolUpdated",
    "symbolsUpdated"
};

}

/// \cond INTERNAL
bool
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_all, iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompAGMExecutiveTopic_AGMExecutiveTopic_all)
    {
        case 0:
        {
            return _iceD_edgeUpdated(in, current);
        }
        case 1:
        {
            return _iceD_edgesUpdated(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_selfEdgeAdded(in, current);
        }
        case 7:
        {
            return _iceD_selfEdgeDeleted(in, current);
        }
        case 8:
        {
            return _iceD_structuralChange(in, current);
        }
        case 9:
        {
            return _iceD_symbolUpdated(in, current);
        }
        case 10:
        {
            return _iceD_symbolsUpdated(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< AGMExecutiveTopic, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompAGMExecutiveTopic::AGMExecutiveTopic::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< AGMExecutiveTopic, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutiveTopic::_icePatchObjectPtr(AGMExecutiveTopicPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = AGMExecutiveTopicPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(AGMExecutiveTopic::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
