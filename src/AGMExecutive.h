//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `AGMExecutive.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __AGMExecutive_h__
#define __AGMExecutive_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <AGMWorldModel.h>
#include <Planning.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompAGMExecutive
{

class AGMExecutive;
class AGMExecutivePrx;

}

namespace RoboCompAGMExecutive
{

class Locked : public ::Ice::UserExceptionHelper<Locked, ::Ice::UserException>
{
public:

    virtual ~Locked();

    Locked(const Locked&) = default;

    Locked() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static Locked _iceS_Locked_init;
/// \endcond

class OldModel : public ::Ice::UserExceptionHelper<OldModel, ::Ice::UserException>
{
public:

    virtual ~OldModel();

    OldModel(const OldModel&) = default;

    OldModel() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class InvalidChange : public ::Ice::UserExceptionHelper<InvalidChange, ::Ice::UserException>
{
public:

    virtual ~InvalidChange();

    InvalidChange(const InvalidChange&) = default;

    InvalidChange() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

}

namespace RoboCompAGMExecutive
{

class AGMExecutive : public virtual ::Ice::Object
{
public:

    using ProxyType = AGMExecutivePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void activate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_activate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void addSelfEdge(int nodeid, ::std::string edgeType, ::RoboCompPlanning::StringDictionary attributes, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addSelfEdge(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void broadcastModel(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_broadcastModel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void broadcastPlan(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_broadcastPlan(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deactivate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_deactivate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void delSelfEdge(int nodeid, ::std::string edgeType, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_delSelfEdge(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void edgeUpdate(::RoboCompAGMWorldModel::Edge e, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_edgeUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void edgesUpdate(::RoboCompAGMWorldModel::EdgeSequence es, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_edgesUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to getData.
     */
    struct GetDataResult
    {
        ::RoboCompAGMWorldModel::World world;
        ::std::string target;
        ::RoboCompPlanning::Plan plan;
    };

    virtual void getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompAGMWorldModel::Edge getEdge(int srcIdentifier, int dstIdentifier, ::std::string label, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getEdge(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompAGMWorldModel::World getModel(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getModel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompAGMWorldModel::Node getNode(int identifier, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getNode(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setMission(::std::string path, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setMission(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void structuralChangeProposal(::RoboCompAGMWorldModel::World w, ::std::string sender, ::std::string log, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_structuralChangeProposal(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void symbolUpdate(::RoboCompAGMWorldModel::Node n, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_symbolUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void symbolsUpdate(::RoboCompAGMWorldModel::NodeSequence ns, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_symbolsUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompAGMExecutive
{

class AGMExecutivePrx : public virtual ::Ice::Proxy<AGMExecutivePrx, ::Ice::ObjectPrx>
{
public:

    void activate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_activate, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto activateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_activate, context);
    }

    ::std::function<void()>
    activateAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_activate, context);
    }

    /// \cond INTERNAL
    void _iceI_activate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void addSelfEdge(int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_addSelfEdge, nodeid, edgeType, attributes, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addSelfEdgeAsync(int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_addSelfEdge, nodeid, edgeType, attributes, context);
    }

    ::std::function<void()>
    addSelfEdgeAsync(int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_addSelfEdge, nodeid, edgeType, attributes, context);
    }

    /// \cond INTERNAL
    void _iceI_addSelfEdge(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::std::string&, const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context&);
    /// \endcond

    void broadcastModel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_broadcastModel, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto broadcastModelAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_broadcastModel, context);
    }

    ::std::function<void()>
    broadcastModelAsync(::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_broadcastModel, context);
    }

    /// \cond INTERNAL
    void _iceI_broadcastModel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void broadcastPlan(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_broadcastPlan, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto broadcastPlanAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_broadcastPlan, context);
    }

    ::std::function<void()>
    broadcastPlanAsync(::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_broadcastPlan, context);
    }

    /// \cond INTERNAL
    void _iceI_broadcastPlan(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void deactivate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_deactivate, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto deactivateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_deactivate, context);
    }

    ::std::function<void()>
    deactivateAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_deactivate, context);
    }

    /// \cond INTERNAL
    void _iceI_deactivate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void delSelfEdge(int nodeid, const ::std::string& edgeType, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_delSelfEdge, nodeid, edgeType, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto delSelfEdgeAsync(int nodeid, const ::std::string& edgeType, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_delSelfEdge, nodeid, edgeType, context);
    }

    ::std::function<void()>
    delSelfEdgeAsync(int nodeid, const ::std::string& edgeType,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_delSelfEdge, nodeid, edgeType, context);
    }

    /// \cond INTERNAL
    void _iceI_delSelfEdge(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_edgeUpdate, e, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto edgeUpdateAsync(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_edgeUpdate, e, context);
    }

    ::std::function<void()>
    edgeUpdateAsync(const ::RoboCompAGMWorldModel::Edge& e,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_edgeUpdate, e, context);
    }

    /// \cond INTERNAL
    void _iceI_edgeUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context&);
    /// \endcond

    void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_edgesUpdate, es, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto edgesUpdateAsync(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_edgesUpdate, es, context);
    }

    ::std::function<void()>
    edgesUpdateAsync(const ::RoboCompAGMWorldModel::EdgeSequence& es,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_edgesUpdate, es, context);
    }

    /// \cond INTERNAL
    void _iceI_edgesUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context&);
    /// \endcond

    void getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<AGMExecutive::GetDataResult>(true, this, &AGMExecutivePrx::_iceI_getData, context).get();
        world = ::std::move(_result.world);
        target = ::std::move(_result.target);
        plan = ::std::move(_result.plan);
    }

    template<template<typename> class P = ::std::promise>
    auto getDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<AGMExecutive::GetDataResult>>().get_future())
    {
        return _makePromiseOutgoing<AGMExecutive::GetDataResult, P>(false, this, &AGMExecutivePrx::_iceI_getData, context);
    }

    ::std::function<void()>
    getDataAsync(::std::function<void(::RoboCompAGMWorldModel::World, ::std::string, ::RoboCompPlanning::Plan)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](AGMExecutive::GetDataResult&& _result)
        {
            response(::std::move(_result.world), ::std::move(_result.target), ::std::move(_result.plan));
        };
        return _makeLamdaOutgoing<AGMExecutive::GetDataResult>(_responseCb, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getData, context);
    }

    /// \cond INTERNAL
    void _iceI_getData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<AGMExecutive::GetDataResult>>&, const ::Ice::Context&);
    /// \endcond

    ::RoboCompAGMWorldModel::Edge getEdge(int srcIdentifier, int dstIdentifier, const ::std::string& label, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompAGMWorldModel::Edge>(true, this, &AGMExecutivePrx::_iceI_getEdge, srcIdentifier, dstIdentifier, label, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getEdgeAsync(int srcIdentifier, int dstIdentifier, const ::std::string& label, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompAGMWorldModel::Edge>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompAGMWorldModel::Edge, P>(false, this, &AGMExecutivePrx::_iceI_getEdge, srcIdentifier, dstIdentifier, label, context);
    }

    ::std::function<void()>
    getEdgeAsync(int srcIdentifier, int dstIdentifier, const ::std::string& label,
                 ::std::function<void(::RoboCompAGMWorldModel::Edge)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompAGMWorldModel::Edge>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getEdge, srcIdentifier, dstIdentifier, label, context);
    }

    /// \cond INTERNAL
    void _iceI_getEdge(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMWorldModel::Edge>>&, int, int, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::RoboCompAGMWorldModel::World getModel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompAGMWorldModel::World>(true, this, &AGMExecutivePrx::_iceI_getModel, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getModelAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompAGMWorldModel::World>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompAGMWorldModel::World, P>(false, this, &AGMExecutivePrx::_iceI_getModel, context);
    }

    ::std::function<void()>
    getModelAsync(::std::function<void(::RoboCompAGMWorldModel::World)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompAGMWorldModel::World>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getModel, context);
    }

    /// \cond INTERNAL
    void _iceI_getModel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMWorldModel::World>>&, const ::Ice::Context&);
    /// \endcond

    ::RoboCompAGMWorldModel::Node getNode(int identifier, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompAGMWorldModel::Node>(true, this, &AGMExecutivePrx::_iceI_getNode, identifier, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNodeAsync(int identifier, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompAGMWorldModel::Node>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompAGMWorldModel::Node, P>(false, this, &AGMExecutivePrx::_iceI_getNode, identifier, context);
    }

    ::std::function<void()>
    getNodeAsync(int identifier,
                 ::std::function<void(::RoboCompAGMWorldModel::Node)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompAGMWorldModel::Node>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getNode, identifier, context);
    }

    /// \cond INTERNAL
    void _iceI_getNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMWorldModel::Node>>&, int, const ::Ice::Context&);
    /// \endcond

    void setMission(const ::std::string& path, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_setMission, path, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setMissionAsync(const ::std::string& path, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_setMission, path, context);
    }

    ::std::function<void()>
    setMissionAsync(const ::std::string& path,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_setMission, path, context);
    }

    /// \cond INTERNAL
    void _iceI_setMission(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_structuralChangeProposal, w, sender, log, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto structuralChangeProposalAsync(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_structuralChangeProposal, w, sender, log, context);
    }

    ::std::function<void()>
    structuralChangeProposalAsync(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log,
                                  ::std::function<void()> response,
                                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                  ::std::function<void(bool)> sent = nullptr,
                                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_structuralChangeProposal, w, sender, log, context);
    }

    /// \cond INTERNAL
    void _iceI_structuralChangeProposal(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_symbolUpdate, n, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto symbolUpdateAsync(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_symbolUpdate, n, context);
    }

    ::std::function<void()>
    symbolUpdateAsync(const ::RoboCompAGMWorldModel::Node& n,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_symbolUpdate, n, context);
    }

    /// \cond INTERNAL
    void _iceI_symbolUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context&);
    /// \endcond

    void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &AGMExecutivePrx::_iceI_symbolsUpdate, ns, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto symbolsUpdateAsync(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &AGMExecutivePrx::_iceI_symbolsUpdate, ns, context);
    }

    ::std::function<void()>
    symbolsUpdateAsync(const ::RoboCompAGMWorldModel::NodeSequence& ns,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutive::AGMExecutivePrx::_iceI_symbolsUpdate, ns, context);
    }

    /// \cond INTERNAL
    void _iceI_symbolsUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    AGMExecutivePrx() = default;
    friend ::std::shared_ptr<AGMExecutivePrx> IceInternal::createProxy<AGMExecutivePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompAGMExecutive
{

using AGMExecutivePtr = ::std::shared_ptr<AGMExecutive>;
using AGMExecutivePrxPtr = ::std::shared_ptr<AGMExecutivePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompAGMExecutive
{

class AGMExecutive;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< AGMExecutive>&);
::IceProxy::Ice::Object* upCast(AGMExecutive*);
/// \endcond

}

}

namespace RoboCompAGMExecutive
{

class AGMExecutive;
/// \cond INTERNAL
::Ice::Object* upCast(AGMExecutive*);
/// \endcond
typedef ::IceInternal::Handle< AGMExecutive> AGMExecutivePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutive::AGMExecutive> AGMExecutivePrx;
typedef AGMExecutivePrx AGMExecutivePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(AGMExecutivePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompAGMExecutive
{

class Locked : public ::Ice::UserException
{
public:

    Locked() {}
    virtual ~Locked() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual Locked* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static Locked _iceS_Locked_init;
/// \endcond

class OldModel : public ::Ice::UserException
{
public:

    OldModel() {}
    virtual ~OldModel() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual OldModel* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class InvalidChange : public ::Ice::UserException
{
public:

    InvalidChange() {}
    virtual ~InvalidChange() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual InvalidChange* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

namespace RoboCompAGMExecutive
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_activate.
 */
class Callback_AGMExecutive_activate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_activate_Base> Callback_AGMExecutive_activatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_addSelfEdge.
 */
class Callback_AGMExecutive_addSelfEdge_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_addSelfEdge_Base> Callback_AGMExecutive_addSelfEdgePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_broadcastModel.
 */
class Callback_AGMExecutive_broadcastModel_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_broadcastModel_Base> Callback_AGMExecutive_broadcastModelPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_broadcastPlan.
 */
class Callback_AGMExecutive_broadcastPlan_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_broadcastPlan_Base> Callback_AGMExecutive_broadcastPlanPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_deactivate.
 */
class Callback_AGMExecutive_deactivate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_deactivate_Base> Callback_AGMExecutive_deactivatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_delSelfEdge.
 */
class Callback_AGMExecutive_delSelfEdge_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_delSelfEdge_Base> Callback_AGMExecutive_delSelfEdgePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_edgeUpdate.
 */
class Callback_AGMExecutive_edgeUpdate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_edgeUpdate_Base> Callback_AGMExecutive_edgeUpdatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_edgesUpdate.
 */
class Callback_AGMExecutive_edgesUpdate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_edgesUpdate_Base> Callback_AGMExecutive_edgesUpdatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getData.
 */
class Callback_AGMExecutive_getData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getData_Base> Callback_AGMExecutive_getDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getEdge.
 */
class Callback_AGMExecutive_getEdge_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getEdge_Base> Callback_AGMExecutive_getEdgePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getModel.
 */
class Callback_AGMExecutive_getModel_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getModel_Base> Callback_AGMExecutive_getModelPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getNode.
 */
class Callback_AGMExecutive_getNode_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_getNode_Base> Callback_AGMExecutive_getNodePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_setMission.
 */
class Callback_AGMExecutive_setMission_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_setMission_Base> Callback_AGMExecutive_setMissionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_structuralChangeProposal.
 */
class Callback_AGMExecutive_structuralChangeProposal_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_structuralChangeProposal_Base> Callback_AGMExecutive_structuralChangeProposalPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_symbolUpdate.
 */
class Callback_AGMExecutive_symbolUpdate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_symbolUpdate_Base> Callback_AGMExecutive_symbolUpdatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_symbolsUpdate.
 */
class Callback_AGMExecutive_symbolsUpdate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutive_symbolsUpdate_Base> Callback_AGMExecutive_symbolsUpdatePtr;

}

namespace IceProxy
{

namespace RoboCompAGMExecutive
{

class AGMExecutive : public virtual ::Ice::Proxy<AGMExecutive, ::IceProxy::Ice::Object>
{
public:

    void activate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_activate(_iceI_begin_activate(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_activate(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::RoboCompAGMExecutive::Callback_AGMExecutive_activatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_activatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(context, cb, cookie);
    }

    void end_activate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_activate(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void addSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_addSelfEdge(_iceI_begin_addSelfEdge(nodeid, edgeType, attributes, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addSelfEdge(nodeid, edgeType, attributes, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addSelfEdge(nodeid, edgeType, attributes, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addSelfEdge(nodeid, edgeType, attributes, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::RoboCompAGMExecutive::Callback_AGMExecutive_addSelfEdgePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addSelfEdge(nodeid, edgeType, attributes, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_addSelfEdgePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addSelfEdge(nodeid, edgeType, attributes, context, cb, cookie);
    }

    void end_addSelfEdge(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addSelfEdge(::Ice::Int, const ::std::string&, const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void broadcastModel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_broadcastModel(_iceI_begin_broadcastModel(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_broadcastModel(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastModel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastModel(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastModelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastModel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastModel(const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastModelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastModel(context, cb, cookie);
    }

    void end_broadcastModel(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_broadcastModel(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void broadcastPlan(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_broadcastPlan(_iceI_begin_broadcastPlan(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_broadcastPlan(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastPlan(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastPlan(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastPlanPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastPlan(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_broadcastPlan(const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_broadcastPlanPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_broadcastPlan(context, cb, cookie);
    }

    void end_broadcastPlan(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_broadcastPlan(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void deactivate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_deactivate(_iceI_begin_deactivate(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_deactivate(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::RoboCompAGMExecutive::Callback_AGMExecutive_deactivatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_deactivatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(context, cb, cookie);
    }

    void end_deactivate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_deactivate(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void delSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_delSelfEdge(_iceI_begin_delSelfEdge(nodeid, edgeType, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_delSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_delSelfEdge(nodeid, edgeType, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_delSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_delSelfEdge(nodeid, edgeType, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_delSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_delSelfEdge(nodeid, edgeType, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_delSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompAGMExecutive::Callback_AGMExecutive_delSelfEdgePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_delSelfEdge(nodeid, edgeType, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_delSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_delSelfEdgePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_delSelfEdge(nodeid, edgeType, context, cb, cookie);
    }

    void end_delSelfEdge(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_delSelfEdge(::Ice::Int, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_edgeUpdate(_iceI_begin_edgeUpdate(e, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_edgeUpdate(e, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdate(e, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdate(e, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgeUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdate(e, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgeUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdate(e, context, cb, cookie);
    }

    void end_edgeUpdate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_edgesUpdate(_iceI_begin_edgesUpdate(es, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_edgesUpdate(es, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdate(es, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdate(es, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgesUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdate(es, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_edgesUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdate(es, context, cb, cookie);
    }

    void end_edgesUpdate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getData(world, target, plan, _iceI_begin_getData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::RoboCompAGMExecutive::Callback_AGMExecutive_getDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(context, cb, cookie);
    }

    void end_getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getData(::RoboCompAGMWorldModel::World& iceP_world, ::std::string& iceP_target, ::RoboCompPlanning::Plan& iceP_plan, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getEdge(_iceI_begin_getEdge(srcIdentifier, dstIdentifier, label, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getEdge(srcIdentifier, dstIdentifier, label, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEdge(srcIdentifier, dstIdentifier, label, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEdge(srcIdentifier, dstIdentifier, label, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getEdgePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEdge(srcIdentifier, dstIdentifier, label, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getEdgePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEdge(srcIdentifier, dstIdentifier, label, context, cb, cookie);
    }

    ::RoboCompAGMWorldModel::Edge end_getEdge(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getEdge(::Ice::Int, ::Ice::Int, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompAGMWorldModel::World getModel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getModel(_iceI_begin_getModel(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getModel(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getModel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getModel(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::RoboCompAGMExecutive::Callback_AGMExecutive_getModelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getModel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getModelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getModel(context, cb, cookie);
    }

    ::RoboCompAGMWorldModel::World end_getModel(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getModel(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompAGMWorldModel::Node getNode(::Ice::Int identifier, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getNode(_iceI_begin_getNode(identifier, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getNode(identifier, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNode(identifier, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNode(identifier, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getNodePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNode(identifier, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNode(::Ice::Int identifier, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_getNodePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNode(identifier, context, cb, cookie);
    }

    ::RoboCompAGMWorldModel::Node end_getNode(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getNode(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setMission(const ::std::string& path, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setMission(_iceI_begin_setMission(path, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setMission(path, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setMission(path, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setMission(path, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::RoboCompAGMExecutive::Callback_AGMExecutive_setMissionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setMission(path, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setMission(const ::std::string& path, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_setMissionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setMission(path, context, cb, cookie);
    }

    void end_setMission(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setMission(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_structuralChangeProposal(_iceI_begin_structuralChangeProposal(w, sender, log, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_structuralChangeProposal(w, sender, log, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChangeProposal(w, sender, log, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChangeProposal(w, sender, log, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::RoboCompAGMExecutive::Callback_AGMExecutive_structuralChangeProposalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChangeProposal(w, sender, log, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_structuralChangeProposalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChangeProposal(w, sender, log, context, cb, cookie);
    }

    void end_structuralChangeProposal(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_symbolUpdate(_iceI_begin_symbolUpdate(n, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_symbolUpdate(n, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdate(n, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdate(n, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdate(n, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdate(n, context, cb, cookie);
    }

    void end_symbolUpdate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_symbolsUpdate(_iceI_begin_symbolsUpdate(ns, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_symbolsUpdate(ns, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdate(ns, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdate(ns, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolsUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdate(ns, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Context& context, const ::RoboCompAGMExecutive::Callback_AGMExecutive_symbolsUpdatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdate(ns, context, cb, cookie);
    }

    void end_symbolsUpdate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompAGMExecutive
{

class AGMExecutive : public virtual ::Ice::Object
{
public:

    typedef AGMExecutivePrx ProxyType;
    typedef AGMExecutivePtr PointerType;

    virtual ~AGMExecutive();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void activate(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_activate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void addSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::RoboCompPlanning::StringDictionary& attributes, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_addSelfEdge(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void broadcastModel(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_broadcastModel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void broadcastPlan(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_broadcastPlan(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deactivate(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_deactivate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void delSelfEdge(::Ice::Int nodeid, const ::std::string& edgeType, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_delSelfEdge(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void edgeUpdate(const ::RoboCompAGMWorldModel::Edge& e, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_edgeUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& es, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_edgesUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getData(::RoboCompAGMWorldModel::World& world, ::std::string& target, ::RoboCompPlanning::Plan& plan, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompAGMWorldModel::Edge getEdge(::Ice::Int srcIdentifier, ::Ice::Int dstIdentifier, const ::std::string& label, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getEdge(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompAGMWorldModel::World getModel(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getModel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::RoboCompAGMWorldModel::Node getNode(::Ice::Int identifier, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getNode(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setMission(const ::std::string& path, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setMission(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void structuralChangeProposal(const ::RoboCompAGMWorldModel::World& w, const ::std::string& sender, const ::std::string& log, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_structuralChangeProposal(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void symbolUpdate(const ::RoboCompAGMWorldModel::Node& n, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_symbolUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& ns, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_symbolsUpdate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const AGMExecutive& lhs, const AGMExecutive& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const AGMExecutive& lhs, const AGMExecutive& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompAGMExecutive::Locked>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompAGMExecutive::OldModel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompAGMExecutive::InvalidChange>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}
/// \endcond

namespace RoboCompAGMExecutive
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_activate.
 */
template<class T>
class CallbackNC_AGMExecutive_activate : public Callback_AGMExecutive_activate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_activate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_activate.
 */
template<class T, typename CT>
class Callback_AGMExecutive_activate : public Callback_AGMExecutive_activate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_activate.
 */
template<class T, typename CT> Callback_AGMExecutive_activatePtr
newCallback_AGMExecutive_activate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_activate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_addSelfEdge.
 */
template<class T>
class CallbackNC_AGMExecutive_addSelfEdge : public Callback_AGMExecutive_addSelfEdge_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_addSelfEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_addSelfEdge<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_addSelfEdge<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_addSelfEdge<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_addSelfEdge<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_addSelfEdge.
 */
template<class T, typename CT>
class Callback_AGMExecutive_addSelfEdge : public Callback_AGMExecutive_addSelfEdge_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_addSelfEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_addSelfEdge<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_addSelfEdge<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_addSelfEdge<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_addSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_addSelfEdgePtr
newCallback_AGMExecutive_addSelfEdge(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_addSelfEdge<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_broadcastModel.
 */
template<class T>
class CallbackNC_AGMExecutive_broadcastModel : public Callback_AGMExecutive_broadcastModel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_broadcastModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastModel<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_broadcastModel.
 */
template<class T, typename CT>
class Callback_AGMExecutive_broadcastModel : public Callback_AGMExecutive_broadcastModel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_broadcastModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastModel.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastModelPtr
newCallback_AGMExecutive_broadcastModel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastModel<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_broadcastPlan.
 */
template<class T>
class CallbackNC_AGMExecutive_broadcastPlan : public Callback_AGMExecutive_broadcastPlan_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_broadcastPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_broadcastPlan<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_broadcastPlan.
 */
template<class T, typename CT>
class Callback_AGMExecutive_broadcastPlan : public Callback_AGMExecutive_broadcastPlan_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_broadcastPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_broadcastPlan.
 */
template<class T, typename CT> Callback_AGMExecutive_broadcastPlanPtr
newCallback_AGMExecutive_broadcastPlan(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_broadcastPlan<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_deactivate.
 */
template<class T>
class CallbackNC_AGMExecutive_deactivate : public Callback_AGMExecutive_deactivate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_deactivate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_deactivate.
 */
template<class T, typename CT>
class Callback_AGMExecutive_deactivate : public Callback_AGMExecutive_deactivate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_deactivate.
 */
template<class T, typename CT> Callback_AGMExecutive_deactivatePtr
newCallback_AGMExecutive_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_deactivate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_delSelfEdge.
 */
template<class T>
class CallbackNC_AGMExecutive_delSelfEdge : public Callback_AGMExecutive_delSelfEdge_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_delSelfEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_delSelfEdge<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_delSelfEdge<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_delSelfEdge<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_delSelfEdge<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_delSelfEdge.
 */
template<class T, typename CT>
class Callback_AGMExecutive_delSelfEdge : public Callback_AGMExecutive_delSelfEdge_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_delSelfEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_delSelfEdge<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_delSelfEdge<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_delSelfEdge<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_delSelfEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_delSelfEdgePtr
newCallback_AGMExecutive_delSelfEdge(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_delSelfEdge<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_edgeUpdate.
 */
template<class T>
class CallbackNC_AGMExecutive_edgeUpdate : public Callback_AGMExecutive_edgeUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_edgeUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgeUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_edgeUpdate.
 */
template<class T, typename CT>
class Callback_AGMExecutive_edgeUpdate : public Callback_AGMExecutive_edgeUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_edgeUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgeUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgeUpdatePtr
newCallback_AGMExecutive_edgeUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgeUpdate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_edgesUpdate.
 */
template<class T>
class CallbackNC_AGMExecutive_edgesUpdate : public Callback_AGMExecutive_edgesUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_edgesUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_edgesUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_edgesUpdate.
 */
template<class T, typename CT>
class Callback_AGMExecutive_edgesUpdate : public Callback_AGMExecutive_edgesUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_edgesUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_edgesUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_edgesUpdatePtr
newCallback_AGMExecutive_edgesUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_edgesUpdate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getData.
 */
template<class T>
class CallbackNC_AGMExecutive_getData : public Callback_AGMExecutive_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&);

    CallbackNC_AGMExecutive_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::World iceP_world;
        ::std::string iceP_target;
        ::RoboCompPlanning::Plan iceP_plan;
        try
        {
            proxy->end_getData(iceP_world, iceP_target, iceP_plan, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_world, iceP_target, iceP_plan);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData.
 */
template<class T> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData.
 */
template<class T> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getData.
 */
template<class T, typename CT>
class Callback_AGMExecutive_getData : public Callback_AGMExecutive_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const CT&);

    Callback_AGMExecutive_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::World iceP_world;
        ::std::string iceP_target;
        ::RoboCompPlanning::Plan iceP_plan;
        try
        {
            proxy->end_getData(iceP_world, iceP_target, iceP_plan, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_world, iceP_target, iceP_plan, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData.
 */
template<class T, typename CT> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getData.
 */
template<class T, typename CT> Callback_AGMExecutive_getDataPtr
newCallback_AGMExecutive_getData(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const ::std::string&, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getEdge.
 */
template<class T>
class CallbackNC_AGMExecutive_getEdge : public Callback_AGMExecutive_getEdge_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Edge&);

    CallbackNC_AGMExecutive_getEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::Edge ret;
        try
        {
            ret = proxy->end_getEdge(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge.
 */
template<class T> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getEdge<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge.
 */
template<class T> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getEdge<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getEdge.
 */
template<class T, typename CT>
class Callback_AGMExecutive_getEdge : public Callback_AGMExecutive_getEdge_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Edge&, const CT&);

    Callback_AGMExecutive_getEdge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::Edge ret;
        try
        {
            ret = proxy->end_getEdge(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getEdge<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getEdge.
 */
template<class T, typename CT> Callback_AGMExecutive_getEdgePtr
newCallback_AGMExecutive_getEdge(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Edge&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getEdge<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getModel.
 */
template<class T>
class CallbackNC_AGMExecutive_getModel : public Callback_AGMExecutive_getModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&);

    CallbackNC_AGMExecutive_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::World ret;
        try
        {
            ret = proxy->end_getModel(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel.
 */
template<class T> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getModel<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel.
 */
template<class T> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getModel<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getModel.
 */
template<class T, typename CT>
class Callback_AGMExecutive_getModel : public Callback_AGMExecutive_getModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::World&, const CT&);

    Callback_AGMExecutive_getModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::World ret;
        try
        {
            ret = proxy->end_getModel(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel.
 */
template<class T, typename CT> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getModel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getModel.
 */
template<class T, typename CT> Callback_AGMExecutive_getModelPtr
newCallback_AGMExecutive_getModel(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::World&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getModel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getNode.
 */
template<class T>
class CallbackNC_AGMExecutive_getNode : public Callback_AGMExecutive_getNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Node&);

    CallbackNC_AGMExecutive_getNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::Node ret;
        try
        {
            ret = proxy->end_getNode(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode.
 */
template<class T> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getNode<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode.
 */
template<class T> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_getNode<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_getNode.
 */
template<class T, typename CT>
class Callback_AGMExecutive_getNode : public Callback_AGMExecutive_getNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMWorldModel::Node&, const CT&);

    Callback_AGMExecutive_getNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMWorldModel::Node ret;
        try
        {
            ret = proxy->end_getNode(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode.
 */
template<class T, typename CT> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getNode<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_getNode.
 */
template<class T, typename CT> Callback_AGMExecutive_getNodePtr
newCallback_AGMExecutive_getNode(T* instance, void (T::*cb)(const ::RoboCompAGMWorldModel::Node&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_getNode<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_setMission.
 */
template<class T>
class CallbackNC_AGMExecutive_setMission : public Callback_AGMExecutive_setMission_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_setMission(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_setMission<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_setMission.
 */
template<class T, typename CT>
class Callback_AGMExecutive_setMission : public Callback_AGMExecutive_setMission_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_setMission(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_setMission.
 */
template<class T, typename CT> Callback_AGMExecutive_setMissionPtr
newCallback_AGMExecutive_setMission(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_setMission<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_structuralChangeProposal.
 */
template<class T>
class CallbackNC_AGMExecutive_structuralChangeProposal : public Callback_AGMExecutive_structuralChangeProposal_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_structuralChangeProposal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_structuralChangeProposal(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_structuralChangeProposal<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_structuralChangeProposal.
 */
template<class T, typename CT>
class Callback_AGMExecutive_structuralChangeProposal : public Callback_AGMExecutive_structuralChangeProposal_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_structuralChangeProposal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        AGMExecutivePrx proxy = AGMExecutivePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_structuralChangeProposal(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_structuralChangeProposal.
 */
template<class T, typename CT> Callback_AGMExecutive_structuralChangeProposalPtr
newCallback_AGMExecutive_structuralChangeProposal(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_structuralChangeProposal<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_symbolUpdate.
 */
template<class T>
class CallbackNC_AGMExecutive_symbolUpdate : public Callback_AGMExecutive_symbolUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_symbolUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_symbolUpdate.
 */
template<class T, typename CT>
class Callback_AGMExecutive_symbolUpdate : public Callback_AGMExecutive_symbolUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_symbolUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolUpdatePtr
newCallback_AGMExecutive_symbolUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolUpdate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_symbolsUpdate.
 */
template<class T>
class CallbackNC_AGMExecutive_symbolsUpdate : public Callback_AGMExecutive_symbolsUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutive_symbolsUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutive_symbolsUpdate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 * Create a wrapper instance by calling ::RoboCompAGMExecutive::newCallback_AGMExecutive_symbolsUpdate.
 */
template<class T, typename CT>
class Callback_AGMExecutive_symbolsUpdate : public Callback_AGMExecutive_symbolsUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutive_symbolsUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompAGMExecutive::AGMExecutive::begin_symbolsUpdate.
 */
template<class T, typename CT> Callback_AGMExecutive_symbolsUpdatePtr
newCallback_AGMExecutive_symbolsUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutive_symbolsUpdate<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
