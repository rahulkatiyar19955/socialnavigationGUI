//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Planning.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Planning.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompPlanning::ServerException> iceC_RoboCompPlanning_ServerException_init("::RoboCompPlanning::ServerException");

const ::std::string iceC_RoboCompPlanning_PlanReceiver_ids[2] =
{
    "::Ice::Object",
    "::RoboCompPlanning::PlanReceiver"
};
const ::std::string iceC_RoboCompPlanning_PlanReceiver_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setPlan"
};
const ::std::string iceC_RoboCompPlanning_PlanReceiver_setPlan_name = "setPlan";

const ::std::string iceC_RoboCompPlanning_Planning_ids[2] =
{
    "::Ice::Object",
    "::RoboCompPlanning::Planning"
};
const ::std::string iceC_RoboCompPlanning_Planning_ops[] =
{
    "getNextAction",
    "getSolution",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_RoboCompPlanning_Planning_getNextAction_name = "getNextAction";
const ::std::string iceC_RoboCompPlanning_Planning_getSolution_name = "getSolution";

const ::std::string iceC_RoboCompPlanning_PeleaAgent_ids[2] =
{
    "::Ice::Object",
    "::RoboCompPlanning::PeleaAgent"
};
const ::std::string iceC_RoboCompPlanning_PeleaAgent_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "stateChanged"
};
const ::std::string iceC_RoboCompPlanning_PeleaAgent_stateChanged_name = "stateChanged";

}

RoboCompPlanning::ServerException::~ServerException()
{
}

const ::std::string&
RoboCompPlanning::ServerException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompPlanning::ServerException";
    return typeId;
}

bool
RoboCompPlanning::PlanReceiver::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompPlanning_PlanReceiver_ids, iceC_RoboCompPlanning_PlanReceiver_ids + 2, s);
}

::std::vector<::std::string>
RoboCompPlanning::PlanReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompPlanning_PlanReceiver_ids[0], &iceC_RoboCompPlanning_PlanReceiver_ids[2]);
}

::std::string
RoboCompPlanning::PlanReceiver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompPlanning::PlanReceiver::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompPlanning::PlanReceiver";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompPlanning::PlanReceiver::_iceD_setPlan(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Plan iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    this->setPlan(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompPlanning::PlanReceiver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompPlanning_PlanReceiver_ops, iceC_RoboCompPlanning_PlanReceiver_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompPlanning_PlanReceiver_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setPlan(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
RoboCompPlanning::Planning::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompPlanning_Planning_ids, iceC_RoboCompPlanning_Planning_ids + 2, s);
}

::std::vector<::std::string>
RoboCompPlanning::Planning::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompPlanning_Planning_ids[0], &iceC_RoboCompPlanning_Planning_ids[2]);
}

::std::string
RoboCompPlanning::Planning::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompPlanning::Planning::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompPlanning::Planning";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompPlanning::Planning::_iceD_getNextAction(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_Problem;
    istr->readAll(iceP_Problem);
    inS.endReadParams();
    Plan iceP_solution;
    bool ret = this->getNextAction(::std::move(iceP_Problem), iceP_solution, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_solution, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompPlanning::Planning::_iceD_getSolution(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_Domain;
    ::std::string iceP_Problem;
    istr->readAll(iceP_Domain, iceP_Problem);
    inS.endReadParams();
    Plan iceP_solution;
    bool ret = this->getSolution(::std::move(iceP_Domain), ::std::move(iceP_Problem), iceP_solution, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_solution, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompPlanning::Planning::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompPlanning_Planning_ops, iceC_RoboCompPlanning_Planning_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompPlanning_Planning_ops)
    {
        case 0:
        {
            return _iceD_getNextAction(in, current);
        }
        case 1:
        {
            return _iceD_getSolution(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
RoboCompPlanning::PeleaAgent::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompPlanning_PeleaAgent_ids, iceC_RoboCompPlanning_PeleaAgent_ids + 2, s);
}

::std::vector<::std::string>
RoboCompPlanning::PeleaAgent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompPlanning_PeleaAgent_ids[0], &iceC_RoboCompPlanning_PeleaAgent_ids[2]);
}

::std::string
RoboCompPlanning::PeleaAgent::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompPlanning::PeleaAgent::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompPlanning::PeleaAgent";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompPlanning::PeleaAgent::_iceD_stateChanged(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringDictionary iceP_state;
    istr->readAll(iceP_state);
    inS.endReadParams();
    this->stateChanged(::std::move(iceP_state), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompPlanning::PeleaAgent::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompPlanning_PeleaAgent_ops, iceC_RoboCompPlanning_PeleaAgent_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompPlanning_PeleaAgent_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_stateChanged(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompPlanning::PlanReceiverPrx::_iceI_setPlan(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Plan& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompPlanning_PlanReceiver_setPlan_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompPlanning::PlanReceiverPrx::_newInstance() const
{
    return ::IceInternal::createProxy<PlanReceiverPrx>();
}
/// \endcond

const ::std::string&
RoboCompPlanning::PlanReceiverPrx::ice_staticId()
{
    return PlanReceiver::ice_staticId();
}

/// \cond INTERNAL
void
RoboCompPlanning::PlanningPrx::_iceI_getNextAction(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Planning::GetNextActionResult>>& outAsync, const ::std::string& iceP_Problem, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompPlanning_Planning_getNextAction_name);
    outAsync->invoke(iceC_RoboCompPlanning_Planning_getNextAction_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_Problem);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            Planning::GetNextActionResult v;
            istr->readAll(v.solution, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompPlanning::PlanningPrx::_iceI_getSolution(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Planning::GetSolutionResult>>& outAsync, const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompPlanning_Planning_getSolution_name);
    outAsync->invoke(iceC_RoboCompPlanning_Planning_getSolution_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_Domain, iceP_Problem);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            Planning::GetSolutionResult v;
            istr->readAll(v.solution, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompPlanning::PlanningPrx::_newInstance() const
{
    return ::IceInternal::createProxy<PlanningPrx>();
}
/// \endcond

const ::std::string&
RoboCompPlanning::PlanningPrx::ice_staticId()
{
    return Planning::ice_staticId();
}

/// \cond INTERNAL
void
RoboCompPlanning::PeleaAgentPrx::_iceI_stateChanged(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const StringDictionary& iceP_state, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompPlanning_PeleaAgent_stateChanged_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_state);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompPlanning::PeleaAgentPrx::_newInstance() const
{
    return ::IceInternal::createProxy<PeleaAgentPrx>();
}
/// \endcond

const ::std::string&
RoboCompPlanning::PeleaAgentPrx::ice_staticId()
{
    return PeleaAgent::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompPlanning_PlanReceiver_setPlan_name = "setPlan";

const ::std::string iceC_RoboCompPlanning_Planning_getNextAction_name = "getNextAction";

const ::std::string iceC_RoboCompPlanning_Planning_getSolution_name = "getSolution";

const ::std::string iceC_RoboCompPlanning_PeleaAgent_stateChanged_name = "stateChanged";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompPlanning::ServerException> iceC_RoboCompPlanning_ServerException_init("::RoboCompPlanning::ServerException");

}

RoboCompPlanning::ServerException::ServerException(const ::std::string& what) :
    ::Ice::UserException(),
    what(what)
{
}

RoboCompPlanning::ServerException::~ServerException() throw()
{
}

::std::string
RoboCompPlanning::ServerException::ice_id() const
{
    return "::RoboCompPlanning::ServerException";
}

RoboCompPlanning::ServerException*
RoboCompPlanning::ServerException::ice_clone() const
{
    return new ServerException(*this);
}

void
RoboCompPlanning::ServerException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompPlanning::ServerException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompPlanning::ServerException", -1, true);
    ::Ice::StreamWriter< ServerException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompPlanning::ServerException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ServerException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompPlanning::upCast(PlanReceiver* p) { return p; }

void
::IceProxy::RoboCompPlanning::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< PlanReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new PlanReceiver;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompPlanning::PlanReceiver::_iceI_begin_setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompPlanning_PlanReceiver_setPlan_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompPlanning_PlanReceiver_setPlan_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_RoboCompPlanning_PlanReceiver_setPlan_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompPlanning::PlanReceiver::end_setPlan(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompPlanning_PlanReceiver_setPlan_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompPlanning::PlanReceiver::_newInstance() const
{
    return new PlanReceiver;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompPlanning::PlanReceiver::ice_staticId()
{
    return ::RoboCompPlanning::PlanReceiver::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompPlanning::upCast(Planning* p) { return p; }

void
::IceProxy::RoboCompPlanning::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Planning>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Planning;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompPlanning::Planning::_iceI_begin_getNextAction(const ::std::string& iceP_Problem, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompPlanning_Planning_getNextAction_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompPlanning_Planning_getNextAction_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompPlanning_Planning_getNextAction_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_Problem);
        result->endWriteParams();
        result->invoke(iceC_RoboCompPlanning_Planning_getNextAction_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompPlanning::Planning::end_getNextAction(::RoboCompPlanning::Plan& iceP_solution, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompPlanning_Planning_getNextAction_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompPlanning::ServerException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_solution);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::RoboCompPlanning::Planning::_iceI_end_getNextAction(::RoboCompPlanning::Plan& iceP_solution, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompPlanning_Planning_getNextAction_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompPlanning::ServerException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_solution);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompPlanning::Planning::_iceI_begin_getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompPlanning_Planning_getSolution_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompPlanning_Planning_getSolution_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompPlanning_Planning_getSolution_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_Domain);
        ostr->write(iceP_Problem);
        result->endWriteParams();
        result->invoke(iceC_RoboCompPlanning_Planning_getSolution_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompPlanning::Planning::end_getSolution(::RoboCompPlanning::Plan& iceP_solution, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompPlanning_Planning_getSolution_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompPlanning::ServerException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_solution);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::RoboCompPlanning::Planning::_iceI_end_getSolution(::RoboCompPlanning::Plan& iceP_solution, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompPlanning_Planning_getSolution_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompPlanning::ServerException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_solution);
    istr->read(ret);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompPlanning::Planning::_newInstance() const
{
    return new Planning;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompPlanning::Planning::ice_staticId()
{
    return ::RoboCompPlanning::Planning::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompPlanning::upCast(PeleaAgent* p) { return p; }

void
::IceProxy::RoboCompPlanning::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< PeleaAgent>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new PeleaAgent;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompPlanning::PeleaAgent::_iceI_begin_stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompPlanning_PeleaAgent_stateChanged_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompPlanning_PeleaAgent_stateChanged_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_state);
        result->endWriteParams();
        result->invoke(iceC_RoboCompPlanning_PeleaAgent_stateChanged_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompPlanning::PeleaAgent::end_stateChanged(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompPlanning_PeleaAgent_stateChanged_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompPlanning::PeleaAgent::_newInstance() const
{
    return new PeleaAgent;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompPlanning::PeleaAgent::ice_staticId()
{
    return ::RoboCompPlanning::PeleaAgent::ice_staticId();
}

RoboCompPlanning::PlanReceiver::~PlanReceiver()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompPlanning::upCast(PlanReceiver* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompPlanning_PlanReceiver_ids[2] =
{
    "::Ice::Object",
    "::RoboCompPlanning::PlanReceiver"
};

}

bool
RoboCompPlanning::PlanReceiver::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompPlanning_PlanReceiver_ids, iceC_RoboCompPlanning_PlanReceiver_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompPlanning::PlanReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompPlanning_PlanReceiver_ids[0], &iceC_RoboCompPlanning_PlanReceiver_ids[2]);
}

const ::std::string&
RoboCompPlanning::PlanReceiver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompPlanning::PlanReceiver::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompPlanning::PlanReceiver";
    return typeId;
#else
    return iceC_RoboCompPlanning_PlanReceiver_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompPlanning::PlanReceiver::_iceD_setPlan(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Plan iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    this->setPlan(iceP_p, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompPlanning_PlanReceiver_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setPlan"
};

}

/// \cond INTERNAL
bool
RoboCompPlanning::PlanReceiver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompPlanning_PlanReceiver_all, iceC_RoboCompPlanning_PlanReceiver_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompPlanning_PlanReceiver_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setPlan(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompPlanning::PlanReceiver::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< PlanReceiver, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompPlanning::PlanReceiver::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PlanReceiver, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompPlanning::_icePatchObjectPtr(PlanReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PlanReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(PlanReceiver::ice_staticId(), v);
    }
}
/// \endcond

RoboCompPlanning::Planning::~Planning()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompPlanning::upCast(Planning* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompPlanning_Planning_ids[2] =
{
    "::Ice::Object",
    "::RoboCompPlanning::Planning"
};

}

bool
RoboCompPlanning::Planning::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompPlanning_Planning_ids, iceC_RoboCompPlanning_Planning_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompPlanning::Planning::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompPlanning_Planning_ids[0], &iceC_RoboCompPlanning_Planning_ids[2]);
}

const ::std::string&
RoboCompPlanning::Planning::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompPlanning::Planning::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompPlanning::Planning";
    return typeId;
#else
    return iceC_RoboCompPlanning_Planning_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompPlanning::Planning::_iceD_getNextAction(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_Problem;
    istr->read(iceP_Problem);
    inS.endReadParams();
    Plan iceP_solution;
    bool ret = this->getNextAction(iceP_Problem, iceP_solution, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_solution);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompPlanning::Planning::_iceD_getSolution(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_Domain;
    ::std::string iceP_Problem;
    istr->read(iceP_Domain);
    istr->read(iceP_Problem);
    inS.endReadParams();
    Plan iceP_solution;
    bool ret = this->getSolution(iceP_Domain, iceP_Problem, iceP_solution, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_solution);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompPlanning_Planning_all[] =
{
    "getNextAction",
    "getSolution",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
RoboCompPlanning::Planning::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompPlanning_Planning_all, iceC_RoboCompPlanning_Planning_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompPlanning_Planning_all)
    {
        case 0:
        {
            return _iceD_getNextAction(in, current);
        }
        case 1:
        {
            return _iceD_getSolution(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompPlanning::Planning::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Planning, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompPlanning::Planning::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Planning, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompPlanning::_icePatchObjectPtr(PlanningPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PlanningPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Planning::ice_staticId(), v);
    }
}
/// \endcond

RoboCompPlanning::PeleaAgent::~PeleaAgent()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompPlanning::upCast(PeleaAgent* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompPlanning_PeleaAgent_ids[2] =
{
    "::Ice::Object",
    "::RoboCompPlanning::PeleaAgent"
};

}

bool
RoboCompPlanning::PeleaAgent::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompPlanning_PeleaAgent_ids, iceC_RoboCompPlanning_PeleaAgent_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompPlanning::PeleaAgent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompPlanning_PeleaAgent_ids[0], &iceC_RoboCompPlanning_PeleaAgent_ids[2]);
}

const ::std::string&
RoboCompPlanning::PeleaAgent::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompPlanning::PeleaAgent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompPlanning::PeleaAgent";
    return typeId;
#else
    return iceC_RoboCompPlanning_PeleaAgent_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompPlanning::PeleaAgent::_iceD_stateChanged(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringDictionary iceP_state;
    istr->read(iceP_state);
    inS.endReadParams();
    this->stateChanged(iceP_state, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompPlanning_PeleaAgent_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "stateChanged"
};

}

/// \cond INTERNAL
bool
RoboCompPlanning::PeleaAgent::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompPlanning_PeleaAgent_all, iceC_RoboCompPlanning_PeleaAgent_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompPlanning_PeleaAgent_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_stateChanged(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompPlanning::PeleaAgent::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< PeleaAgent, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompPlanning::PeleaAgent::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PeleaAgent, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompPlanning::_icePatchObjectPtr(PeleaAgentPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PeleaAgentPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(PeleaAgent::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
