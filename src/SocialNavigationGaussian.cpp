//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `SocialNavigationGaussian.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <SocialNavigationGaussian.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids[2] =
{
    "::Ice::Object",
    "::RoboCompSocialNavigationGaussian::SocialNavigationGaussian"
};
const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ops[] =
{
    "getAllPersonalSpaces",
    "getObjectInteraction",
    "getPassOnRight",
    "getPersonalSpace",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name = "getAllPersonalSpaces";
const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name = "getObjectInteraction";
const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name = "getPassOnRight";
const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name = "getPersonalSpace";

}

bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids + 2, s);
}

::std::vector<::std::string>
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids[0], &iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids[2]);
}

::std::string
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompSocialNavigationGaussian::SocialNavigationGaussian";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getAllPersonalSpaces(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    float iceP_represent;
    istr->readAll(iceP_persons, iceP_represent);
    inS.endReadParams();
    SNGPolylineSeq iceP_intimateSpace;
    SNGPolylineSeq iceP_personalSpace;
    SNGPolylineSeq iceP_socialSpace;
    this->getAllPersonalSpaces(::std::move(iceP_persons), iceP_represent, iceP_intimateSpace, iceP_personalSpace, iceP_socialSpace, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_intimateSpace, iceP_personalSpace, iceP_socialSpace);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getObjectInteraction(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    SNGObjectSeq iceP_objects;
    bool iceP_d;
    bool iceP_interact;
    istr->readAll(iceP_persons, iceP_objects, iceP_d, iceP_interact);
    inS.endReadParams();
    SNGPolylineSeq ret = this->getObjectInteraction(::std::move(iceP_persons), ::std::move(iceP_objects), iceP_d, iceP_interact, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getPassOnRight(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    float iceP_v;
    bool iceP_d;
    istr->readAll(iceP_persons, iceP_v, iceP_d);
    inS.endReadParams();
    SNGPolylineSeq ret = this->getPassOnRight(::std::move(iceP_persons), iceP_v, iceP_d, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getPersonalSpace(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    float iceP_v;
    bool iceP_d;
    istr->readAll(iceP_persons, iceP_v, iceP_d);
    inS.endReadParams();
    SNGPolylineSeq ret = this->getPersonalSpace(::std::move(iceP_persons), iceP_v, iceP_d, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ops, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ops)
    {
        case 0:
        {
            return _iceD_getAllPersonalSpaces(in, current);
        }
        case 1:
        {
            return _iceD_getObjectInteraction(in, current);
        }
        case 2:
        {
            return _iceD_getPassOnRight(in, current);
        }
        case 3:
        {
            return _iceD_getPersonalSpace(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getAllPersonalSpaces(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<SocialNavigationGaussian::GetAllPersonalSpacesResult>>& outAsync, const SNGPersonSeq& iceP_persons, float iceP_represent, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name);
    outAsync->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_persons, iceP_represent);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            SocialNavigationGaussian::GetAllPersonalSpacesResult v;
            istr->readAll(v.intimateSpace, v.personalSpace, v.socialSpace);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getObjectInteraction(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>& outAsync, const SNGPersonSeq& iceP_persons, const SNGObjectSeq& iceP_objects, bool iceP_d, bool iceP_interact, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name);
    outAsync->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_persons, iceP_objects, iceP_d, iceP_interact);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getPassOnRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>& outAsync, const SNGPersonSeq& iceP_persons, float iceP_v, bool iceP_d, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name);
    outAsync->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_persons, iceP_v, iceP_d);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getPersonalSpace(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>& outAsync, const SNGPersonSeq& iceP_persons, float iceP_v, bool iceP_d, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name);
    outAsync->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_persons, iceP_v, iceP_d);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SocialNavigationGaussianPrx>();
}
/// \endcond

const ::std::string&
RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::ice_staticId()
{
    return SocialNavigationGaussian::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name = "getAllPersonalSpaces";

const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name = "getObjectInteraction";

const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name = "getPassOnRight";

const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name = "getPersonalSpace";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompSocialNavigationGaussian::upCast(SocialNavigationGaussian* p) { return p; }

void
::IceProxy::RoboCompSocialNavigationGaussian::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< SocialNavigationGaussian>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new SocialNavigationGaussian;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceI_begin_getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& iceP_persons, ::Ice::Float iceP_represent, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_persons);
        ostr->write(iceP_represent);
        result->endWriteParams();
        result->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::end_getAllPersonalSpaces(::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_intimateSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_personalSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_socialSpace, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_intimateSpace);
    istr->read(iceP_personalSpace);
    istr->read(iceP_socialSpace);
    result->_endReadParams();
}

void IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceI_end_getAllPersonalSpaces(::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_intimateSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_personalSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_socialSpace, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getAllPersonalSpaces_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_intimateSpace);
    istr->read(iceP_personalSpace);
    istr->read(iceP_socialSpace);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceI_begin_getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& iceP_persons, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq& iceP_objects, bool iceP_d, bool iceP_interact, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_persons);
        ostr->write(iceP_objects);
        ostr->write(iceP_d);
        ostr->write(iceP_interact);
        result->endWriteParams();
        result->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompSocialNavigationGaussian::SNGPolylineSeq
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::end_getObjectInteraction(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getObjectInteraction_name);
    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceI_begin_getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& iceP_persons, ::Ice::Float iceP_v, bool iceP_d, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_persons);
        ostr->write(iceP_v);
        ostr->write(iceP_d);
        result->endWriteParams();
        result->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompSocialNavigationGaussian::SNGPolylineSeq
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::end_getPassOnRight(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPassOnRight_name);
    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceI_begin_getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& iceP_persons, ::Ice::Float iceP_v, bool iceP_d, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_persons);
        ostr->write(iceP_v);
        ostr->write(iceP_d);
        result->endWriteParams();
        result->invoke(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompSocialNavigationGaussian::SNGPolylineSeq
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::end_getPersonalSpace(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_getPersonalSpace_name);
    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_newInstance() const
{
    return new SocialNavigationGaussian;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_staticId()
{
    return ::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_staticId();
}

RoboCompSocialNavigationGaussian::SocialNavigationGaussian::~SocialNavigationGaussian()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompSocialNavigationGaussian::upCast(SocialNavigationGaussian* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids[2] =
{
    "::Ice::Object",
    "::RoboCompSocialNavigationGaussian::SocialNavigationGaussian"
};

}

bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids[0], &iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids[2]);
}

const ::std::string&
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompSocialNavigationGaussian::SocialNavigationGaussian";
    return typeId;
#else
    return iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getAllPersonalSpaces(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    ::Ice::Float iceP_represent;
    istr->read(iceP_persons);
    istr->read(iceP_represent);
    inS.endReadParams();
    SNGPolylineSeq iceP_intimateSpace;
    SNGPolylineSeq iceP_personalSpace;
    SNGPolylineSeq iceP_socialSpace;
    this->getAllPersonalSpaces(iceP_persons, iceP_represent, iceP_intimateSpace, iceP_personalSpace, iceP_socialSpace, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_intimateSpace);
    ostr->write(iceP_personalSpace);
    ostr->write(iceP_socialSpace);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getObjectInteraction(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    SNGObjectSeq iceP_objects;
    bool iceP_d;
    bool iceP_interact;
    istr->read(iceP_persons);
    istr->read(iceP_objects);
    istr->read(iceP_d);
    istr->read(iceP_interact);
    inS.endReadParams();
    SNGPolylineSeq ret = this->getObjectInteraction(iceP_persons, iceP_objects, iceP_d, iceP_interact, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getPassOnRight(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    ::Ice::Float iceP_v;
    bool iceP_d;
    istr->read(iceP_persons);
    istr->read(iceP_v);
    istr->read(iceP_d);
    inS.endReadParams();
    SNGPolylineSeq ret = this->getPassOnRight(iceP_persons, iceP_v, iceP_d, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceD_getPersonalSpace(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SNGPersonSeq iceP_persons;
    ::Ice::Float iceP_v;
    bool iceP_d;
    istr->read(iceP_persons);
    istr->read(iceP_v);
    istr->read(iceP_d);
    inS.endReadParams();
    SNGPolylineSeq ret = this->getPersonalSpace(iceP_persons, iceP_v, iceP_d, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_all[] =
{
    "getAllPersonalSpaces",
    "getObjectInteraction",
    "getPassOnRight",
    "getPersonalSpace",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_all, iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompSocialNavigationGaussian_SocialNavigationGaussian_all)
    {
        case 0:
        {
            return _iceD_getAllPersonalSpaces(in, current);
        }
        case 1:
        {
            return _iceD_getObjectInteraction(in, current);
        }
        case 2:
        {
            return _iceD_getPassOnRight(in, current);
        }
        case 3:
        {
            return _iceD_getPersonalSpace(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< SocialNavigationGaussian, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompSocialNavigationGaussian::SocialNavigationGaussian::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SocialNavigationGaussian, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompSocialNavigationGaussian::_icePatchObjectPtr(SocialNavigationGaussianPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SocialNavigationGaussianPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SocialNavigationGaussian::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
