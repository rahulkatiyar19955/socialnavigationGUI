//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `AGMExecutive.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <AGMExecutive.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompAGMExecutive::Locked> iceC_RoboCompAGMExecutive_Locked_init("::RoboCompAGMExecutive::Locked");

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompAGMExecutive::OldModel> iceC_RoboCompAGMExecutive_OldModel_init("::RoboCompAGMExecutive::OldModel");

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompAGMExecutive::InvalidChange> iceC_RoboCompAGMExecutive_InvalidChange_init("::RoboCompAGMExecutive::InvalidChange");

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutive"
};
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_ops[] =
{
    "activate",
    "addSelfEdge",
    "broadcastModel",
    "broadcastPlan",
    "deactivate",
    "delSelfEdge",
    "edgeUpdate",
    "edgesUpdate",
    "getData",
    "getEdge",
    "getModel",
    "getNode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setMission",
    "structuralChangeProposal",
    "symbolUpdate",
    "symbolsUpdate"
};
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_activate_name = "activate";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_addSelfEdge_name = "addSelfEdge";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_broadcastModel_name = "broadcastModel";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_broadcastPlan_name = "broadcastPlan";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_deactivate_name = "deactivate";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_delSelfEdge_name = "delSelfEdge";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_edgeUpdate_name = "edgeUpdate";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_edgesUpdate_name = "edgesUpdate";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getData_name = "getData";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name = "getEdge";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name = "getModel";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name = "getNode";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_setMission_name = "setMission";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name = "structuralChangeProposal";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_symbolUpdate_name = "symbolUpdate";
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_symbolsUpdate_name = "symbolsUpdate";

}

RoboCompAGMExecutive::Locked::~Locked()
{
}

const ::std::string&
RoboCompAGMExecutive::Locked::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompAGMExecutive::Locked";
    return typeId;
}

RoboCompAGMExecutive::OldModel::~OldModel()
{
}

const ::std::string&
RoboCompAGMExecutive::OldModel::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompAGMExecutive::OldModel";
    return typeId;
}

RoboCompAGMExecutive::InvalidChange::~InvalidChange()
{
}

const ::std::string&
RoboCompAGMExecutive::InvalidChange::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompAGMExecutive::InvalidChange";
    return typeId;
}

bool
RoboCompAGMExecutive::AGMExecutive::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompAGMExecutive_AGMExecutive_ids, iceC_RoboCompAGMExecutive_AGMExecutive_ids + 2, s);
}

::std::vector<::std::string>
RoboCompAGMExecutive::AGMExecutive::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompAGMExecutive_AGMExecutive_ids[0], &iceC_RoboCompAGMExecutive_AGMExecutive_ids[2]);
}

::std::string
RoboCompAGMExecutive::AGMExecutive::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutive::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompAGMExecutive::AGMExecutive";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_activate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->activate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_addSelfEdge(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_nodeid;
    ::std::string iceP_edgeType;
    ::RoboCompPlanning::StringDictionary iceP_attributes;
    istr->readAll(iceP_nodeid, iceP_edgeType, iceP_attributes);
    inS.endReadParams();
    this->addSelfEdge(iceP_nodeid, ::std::move(iceP_edgeType), ::std::move(iceP_attributes), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_broadcastModel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->broadcastModel(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_broadcastPlan(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->broadcastPlan(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_deactivate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->deactivate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_delSelfEdge(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_nodeid;
    ::std::string iceP_edgeType;
    istr->readAll(iceP_nodeid, iceP_edgeType);
    inS.endReadParams();
    this->delSelfEdge(iceP_nodeid, ::std::move(iceP_edgeType), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_edgeUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Edge iceP_e;
    istr->readAll(iceP_e);
    inS.endReadParams();
    this->edgeUpdate(::std::move(iceP_e), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_edgesUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::EdgeSequence iceP_es;
    istr->readAll(iceP_es);
    inS.endReadParams();
    this->edgesUpdate(::std::move(iceP_es), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompAGMWorldModel::World iceP_world;
    ::std::string iceP_target;
    ::RoboCompPlanning::Plan iceP_plan;
    this->getData(iceP_world, iceP_target, iceP_plan, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_world, iceP_target, iceP_plan);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getEdge(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_srcIdentifier;
    int iceP_dstIdentifier;
    ::std::string iceP_label;
    istr->readAll(iceP_srcIdentifier, iceP_dstIdentifier, iceP_label);
    inS.endReadParams();
    ::RoboCompAGMWorldModel::Edge ret = this->getEdge(iceP_srcIdentifier, iceP_dstIdentifier, ::std::move(iceP_label), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getModel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompAGMWorldModel::World ret = this->getModel(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_identifier;
    istr->readAll(iceP_identifier);
    inS.endReadParams();
    ::RoboCompAGMWorldModel::Node ret = this->getNode(iceP_identifier, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_setMission(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_path;
    istr->readAll(iceP_path);
    inS.endReadParams();
    this->setMission(::std::move(iceP_path), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_structuralChangeProposal(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::World iceP_w;
    ::std::string iceP_sender;
    ::std::string iceP_log;
    istr->readAll(iceP_w, iceP_sender, iceP_log);
    inS.endReadParams();
    this->structuralChangeProposal(::std::move(iceP_w), ::std::move(iceP_sender), ::std::move(iceP_log), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_symbolUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Node iceP_n;
    istr->readAll(iceP_n);
    inS.endReadParams();
    this->symbolUpdate(::std::move(iceP_n), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_symbolsUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::NodeSequence iceP_ns;
    istr->readAll(iceP_ns);
    inS.endReadParams();
    this->symbolsUpdate(::std::move(iceP_ns), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompAGMExecutive_AGMExecutive_ops, iceC_RoboCompAGMExecutive_AGMExecutive_ops + 20, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompAGMExecutive_AGMExecutive_ops)
    {
        case 0:
        {
            return _iceD_activate(in, current);
        }
        case 1:
        {
            return _iceD_addSelfEdge(in, current);
        }
        case 2:
        {
            return _iceD_broadcastModel(in, current);
        }
        case 3:
        {
            return _iceD_broadcastPlan(in, current);
        }
        case 4:
        {
            return _iceD_deactivate(in, current);
        }
        case 5:
        {
            return _iceD_delSelfEdge(in, current);
        }
        case 6:
        {
            return _iceD_edgeUpdate(in, current);
        }
        case 7:
        {
            return _iceD_edgesUpdate(in, current);
        }
        case 8:
        {
            return _iceD_getData(in, current);
        }
        case 9:
        {
            return _iceD_getEdge(in, current);
        }
        case 10:
        {
            return _iceD_getModel(in, current);
        }
        case 11:
        {
            return _iceD_getNode(in, current);
        }
        case 12:
        {
            return _iceD_ice_id(in, current);
        }
        case 13:
        {
            return _iceD_ice_ids(in, current);
        }
        case 14:
        {
            return _iceD_ice_isA(in, current);
        }
        case 15:
        {
            return _iceD_ice_ping(in, current);
        }
        case 16:
        {
            return _iceD_setMission(in, current);
        }
        case 17:
        {
            return _iceD_structuralChangeProposal(in, current);
        }
        case 18:
        {
            return _iceD_symbolUpdate(in, current);
        }
        case 19:
        {
            return _iceD_symbolsUpdate(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_activate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_activate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_addSelfEdge(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompPlanning::StringDictionary& iceP_attributes, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_addSelfEdge_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_nodeid, iceP_edgeType, iceP_attributes);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_broadcastModel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_broadcastModel_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_broadcastPlan(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_broadcastPlan_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_deactivate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_deactivate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_delSelfEdge(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_delSelfEdge_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_nodeid, iceP_edgeType);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_edgeUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::Edge& iceP_e, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_edgeUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_e);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_edgesUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::EdgeSequence& iceP_es, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_edgesUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_es);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<AGMExecutive::GetDataResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getData_name);
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getData_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            AGMExecutive::GetDataResult v;
            istr->readAll(v.world, v.target, v.plan);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getEdge(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMWorldModel::Edge>>& outAsync, int iceP_srcIdentifier, int iceP_dstIdentifier, const ::std::string& iceP_label, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name);
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_srcIdentifier, iceP_dstIdentifier, iceP_label);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getModel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMWorldModel::World>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name);
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_getNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMWorldModel::Node>>& outAsync, int iceP_identifier, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name);
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_identifier);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_setMission(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_path, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_setMission_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_path);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_structuralChangeProposal(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::World& iceP_w, const ::std::string& iceP_sender, const ::std::string& iceP_log, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name);
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_w, iceP_sender, iceP_log);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InvalidChange&)
            {
                throw;
            }
            catch(const Locked&)
            {
                throw;
            }
            catch(const OldModel&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_symbolUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::Node& iceP_n, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_symbolUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_n);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::AGMExecutivePrx::_iceI_symbolsUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompAGMWorldModel::NodeSequence& iceP_ns, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_symbolsUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ns);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompAGMExecutive::AGMExecutivePrx::_newInstance() const
{
    return ::IceInternal::createProxy<AGMExecutivePrx>();
}
/// \endcond

const ::std::string&
RoboCompAGMExecutive::AGMExecutivePrx::ice_staticId()
{
    return AGMExecutive::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_activate_name = "activate";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_addSelfEdge_name = "addSelfEdge";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_broadcastModel_name = "broadcastModel";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_broadcastPlan_name = "broadcastPlan";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_deactivate_name = "deactivate";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_delSelfEdge_name = "delSelfEdge";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_edgeUpdate_name = "edgeUpdate";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_edgesUpdate_name = "edgesUpdate";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getData_name = "getData";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name = "getEdge";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name = "getModel";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name = "getNode";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_setMission_name = "setMission";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name = "structuralChangeProposal";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_symbolUpdate_name = "symbolUpdate";

const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_symbolsUpdate_name = "symbolsUpdate";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompAGMExecutive::Locked> iceC_RoboCompAGMExecutive_Locked_init("::RoboCompAGMExecutive::Locked");

}

RoboCompAGMExecutive::Locked::~Locked() throw()
{
}

::std::string
RoboCompAGMExecutive::Locked::ice_id() const
{
    return "::RoboCompAGMExecutive::Locked";
}

RoboCompAGMExecutive::Locked*
RoboCompAGMExecutive::Locked::ice_clone() const
{
    return new Locked(*this);
}

void
RoboCompAGMExecutive::Locked::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompAGMExecutive::Locked::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompAGMExecutive::Locked", -1, true);
    ::Ice::StreamWriter< Locked, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompAGMExecutive::Locked::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Locked, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompAGMExecutive::OldModel> iceC_RoboCompAGMExecutive_OldModel_init("::RoboCompAGMExecutive::OldModel");

}

RoboCompAGMExecutive::OldModel::~OldModel() throw()
{
}

::std::string
RoboCompAGMExecutive::OldModel::ice_id() const
{
    return "::RoboCompAGMExecutive::OldModel";
}

RoboCompAGMExecutive::OldModel*
RoboCompAGMExecutive::OldModel::ice_clone() const
{
    return new OldModel(*this);
}

void
RoboCompAGMExecutive::OldModel::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompAGMExecutive::OldModel::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompAGMExecutive::OldModel", -1, true);
    ::Ice::StreamWriter< OldModel, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompAGMExecutive::OldModel::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OldModel, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompAGMExecutive::InvalidChange> iceC_RoboCompAGMExecutive_InvalidChange_init("::RoboCompAGMExecutive::InvalidChange");

}

RoboCompAGMExecutive::InvalidChange::~InvalidChange() throw()
{
}

::std::string
RoboCompAGMExecutive::InvalidChange::ice_id() const
{
    return "::RoboCompAGMExecutive::InvalidChange";
}

RoboCompAGMExecutive::InvalidChange*
RoboCompAGMExecutive::InvalidChange::ice_clone() const
{
    return new InvalidChange(*this);
}

void
RoboCompAGMExecutive::InvalidChange::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompAGMExecutive::InvalidChange::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompAGMExecutive::InvalidChange", -1, true);
    ::Ice::StreamWriter< InvalidChange, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompAGMExecutive::InvalidChange::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InvalidChange, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompAGMExecutive::upCast(AGMExecutive* p) { return p; }

void
::IceProxy::RoboCompAGMExecutive::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< AGMExecutive>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new AGMExecutive;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_activate(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_activate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_activate_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_activate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_activate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_activate_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_addSelfEdge(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompPlanning::StringDictionary& iceP_attributes, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_addSelfEdge_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_addSelfEdge_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_nodeid);
        ostr->write(iceP_edgeType);
        ostr->write(iceP_attributes);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_addSelfEdge_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_addSelfEdge(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_addSelfEdge_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_broadcastModel(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_broadcastModel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_broadcastModel_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_broadcastModel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_broadcastModel(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_broadcastModel_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_broadcastPlan(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_broadcastPlan_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_broadcastPlan_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_broadcastPlan_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_broadcastPlan(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_broadcastPlan_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_deactivate(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_deactivate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_deactivate_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_deactivate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_deactivate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_deactivate_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_delSelfEdge(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_delSelfEdge_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_delSelfEdge_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_nodeid);
        ostr->write(iceP_edgeType);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_delSelfEdge_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_delSelfEdge(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_delSelfEdge_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_edgeUpdate(const ::RoboCompAGMWorldModel::Edge& iceP_e, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_edgeUpdate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_edgeUpdate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_e);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_edgeUpdate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_edgeUpdate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_edgeUpdate_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_edgesUpdate(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_es, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_edgesUpdate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_edgesUpdate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_es);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_edgesUpdate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_edgesUpdate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_edgesUpdate_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_getData(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getData_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_getData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_getData_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getData(::RoboCompAGMWorldModel::World& iceP_world, ::std::string& iceP_target, ::RoboCompPlanning::Plan& iceP_plan, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompAGMExecutive_AGMExecutive_getData_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_world);
    istr->read(iceP_target);
    istr->read(iceP_plan);
    result->_endReadParams();
}

void IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_end_getData(::RoboCompAGMWorldModel::World& iceP_world, ::std::string& iceP_target, ::RoboCompPlanning::Plan& iceP_plan, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompAGMExecutive_AGMExecutive_getData_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_world);
    istr->read(iceP_target);
    istr->read(iceP_plan);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_getEdge(::Ice::Int iceP_srcIdentifier, ::Ice::Int iceP_dstIdentifier, const ::std::string& iceP_label, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_srcIdentifier);
        ostr->write(iceP_dstIdentifier);
        ostr->write(iceP_label);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompAGMWorldModel::Edge
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getEdge(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompAGMExecutive_AGMExecutive_getEdge_name);
    ::RoboCompAGMWorldModel::Edge ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_getModel(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompAGMWorldModel::World
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getModel(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompAGMExecutive_AGMExecutive_getModel_name);
    ::RoboCompAGMWorldModel::World ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_getNode(::Ice::Int iceP_identifier, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_identifier);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompAGMWorldModel::Node
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_getNode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompAGMExecutive_AGMExecutive_getNode_name);
    ::RoboCompAGMWorldModel::Node ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_setMission(const ::std::string& iceP_path, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_setMission_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_setMission_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_path);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_setMission_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_setMission(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_setMission_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_structuralChangeProposal(const ::RoboCompAGMWorldModel::World& iceP_w, const ::std::string& iceP_sender, const ::std::string& iceP_log, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_w);
        ostr->write(iceP_sender);
        ostr->write(iceP_log);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_structuralChangeProposal(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompAGMExecutive_AGMExecutive_structuralChangeProposal_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompAGMExecutive::InvalidChange&)
        {
            throw;
        }
        catch(const ::RoboCompAGMExecutive::Locked&)
        {
            throw;
        }
        catch(const ::RoboCompAGMExecutive::OldModel&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_symbolUpdate(const ::RoboCompAGMWorldModel::Node& iceP_n, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_symbolUpdate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_symbolUpdate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_n);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_symbolUpdate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_symbolUpdate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_symbolUpdate_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompAGMExecutive::AGMExecutive::_iceI_begin_symbolsUpdate(const ::RoboCompAGMWorldModel::NodeSequence& iceP_ns, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompAGMExecutive_AGMExecutive_symbolsUpdate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompAGMExecutive_AGMExecutive_symbolsUpdate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ns);
        result->endWriteParams();
        result->invoke(iceC_RoboCompAGMExecutive_AGMExecutive_symbolsUpdate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompAGMExecutive::AGMExecutive::end_symbolsUpdate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompAGMExecutive_AGMExecutive_symbolsUpdate_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompAGMExecutive::AGMExecutive::_newInstance() const
{
    return new AGMExecutive;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompAGMExecutive::AGMExecutive::ice_staticId()
{
    return ::RoboCompAGMExecutive::AGMExecutive::ice_staticId();
}

RoboCompAGMExecutive::AGMExecutive::~AGMExecutive()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompAGMExecutive::upCast(AGMExecutive* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_ids[2] =
{
    "::Ice::Object",
    "::RoboCompAGMExecutive::AGMExecutive"
};

}

bool
RoboCompAGMExecutive::AGMExecutive::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompAGMExecutive_AGMExecutive_ids, iceC_RoboCompAGMExecutive_AGMExecutive_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompAGMExecutive::AGMExecutive::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompAGMExecutive_AGMExecutive_ids[0], &iceC_RoboCompAGMExecutive_AGMExecutive_ids[2]);
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutive::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompAGMExecutive::AGMExecutive::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompAGMExecutive::AGMExecutive";
    return typeId;
#else
    return iceC_RoboCompAGMExecutive_AGMExecutive_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_activate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->activate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_addSelfEdge(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_nodeid;
    ::std::string iceP_edgeType;
    ::RoboCompPlanning::StringDictionary iceP_attributes;
    istr->read(iceP_nodeid);
    istr->read(iceP_edgeType);
    istr->read(iceP_attributes);
    inS.endReadParams();
    this->addSelfEdge(iceP_nodeid, iceP_edgeType, iceP_attributes, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_broadcastModel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->broadcastModel(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_broadcastPlan(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->broadcastPlan(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_deactivate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->deactivate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_delSelfEdge(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_nodeid;
    ::std::string iceP_edgeType;
    istr->read(iceP_nodeid);
    istr->read(iceP_edgeType);
    inS.endReadParams();
    this->delSelfEdge(iceP_nodeid, iceP_edgeType, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_edgeUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Edge iceP_e;
    istr->read(iceP_e);
    inS.endReadParams();
    this->edgeUpdate(iceP_e, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_edgesUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::EdgeSequence iceP_es;
    istr->read(iceP_es);
    inS.endReadParams();
    this->edgesUpdate(iceP_es, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompAGMWorldModel::World iceP_world;
    ::std::string iceP_target;
    ::RoboCompPlanning::Plan iceP_plan;
    this->getData(iceP_world, iceP_target, iceP_plan, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_world);
    ostr->write(iceP_target);
    ostr->write(iceP_plan);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getEdge(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_srcIdentifier;
    ::Ice::Int iceP_dstIdentifier;
    ::std::string iceP_label;
    istr->read(iceP_srcIdentifier);
    istr->read(iceP_dstIdentifier);
    istr->read(iceP_label);
    inS.endReadParams();
    ::RoboCompAGMWorldModel::Edge ret = this->getEdge(iceP_srcIdentifier, iceP_dstIdentifier, iceP_label, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getModel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompAGMWorldModel::World ret = this->getModel(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_getNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_identifier;
    istr->read(iceP_identifier);
    inS.endReadParams();
    ::RoboCompAGMWorldModel::Node ret = this->getNode(iceP_identifier, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_setMission(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_path;
    istr->read(iceP_path);
    inS.endReadParams();
    this->setMission(iceP_path, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_structuralChangeProposal(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::World iceP_w;
    ::std::string iceP_sender;
    ::std::string iceP_log;
    istr->read(iceP_w);
    istr->read(iceP_sender);
    istr->read(iceP_log);
    inS.endReadParams();
    this->structuralChangeProposal(iceP_w, iceP_sender, iceP_log, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_symbolUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::Node iceP_n;
    istr->read(iceP_n);
    inS.endReadParams();
    this->symbolUpdate(iceP_n, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceD_symbolsUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompAGMWorldModel::NodeSequence iceP_ns;
    istr->read(iceP_ns);
    inS.endReadParams();
    this->symbolsUpdate(iceP_ns, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompAGMExecutive_AGMExecutive_all[] =
{
    "activate",
    "addSelfEdge",
    "broadcastModel",
    "broadcastPlan",
    "deactivate",
    "delSelfEdge",
    "edgeUpdate",
    "edgesUpdate",
    "getData",
    "getEdge",
    "getModel",
    "getNode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setMission",
    "structuralChangeProposal",
    "symbolUpdate",
    "symbolsUpdate"
};

}

/// \cond INTERNAL
bool
RoboCompAGMExecutive::AGMExecutive::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompAGMExecutive_AGMExecutive_all, iceC_RoboCompAGMExecutive_AGMExecutive_all + 20, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompAGMExecutive_AGMExecutive_all)
    {
        case 0:
        {
            return _iceD_activate(in, current);
        }
        case 1:
        {
            return _iceD_addSelfEdge(in, current);
        }
        case 2:
        {
            return _iceD_broadcastModel(in, current);
        }
        case 3:
        {
            return _iceD_broadcastPlan(in, current);
        }
        case 4:
        {
            return _iceD_deactivate(in, current);
        }
        case 5:
        {
            return _iceD_delSelfEdge(in, current);
        }
        case 6:
        {
            return _iceD_edgeUpdate(in, current);
        }
        case 7:
        {
            return _iceD_edgesUpdate(in, current);
        }
        case 8:
        {
            return _iceD_getData(in, current);
        }
        case 9:
        {
            return _iceD_getEdge(in, current);
        }
        case 10:
        {
            return _iceD_getModel(in, current);
        }
        case 11:
        {
            return _iceD_getNode(in, current);
        }
        case 12:
        {
            return _iceD_ice_id(in, current);
        }
        case 13:
        {
            return _iceD_ice_ids(in, current);
        }
        case 14:
        {
            return _iceD_ice_isA(in, current);
        }
        case 15:
        {
            return _iceD_ice_ping(in, current);
        }
        case 16:
        {
            return _iceD_setMission(in, current);
        }
        case 17:
        {
            return _iceD_structuralChangeProposal(in, current);
        }
        case 18:
        {
            return _iceD_symbolUpdate(in, current);
        }
        case 19:
        {
            return _iceD_symbolsUpdate(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompAGMExecutive::AGMExecutive::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< AGMExecutive, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompAGMExecutive::AGMExecutive::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< AGMExecutive, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompAGMExecutive::_icePatchObjectPtr(AGMExecutivePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = AGMExecutivePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(AGMExecutive::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
