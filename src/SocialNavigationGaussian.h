//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `SocialNavigationGaussian.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __SocialNavigationGaussian_h__
#define __SocialNavigationGaussian_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompSocialNavigationGaussian
{

class SocialNavigationGaussian;
class SocialNavigationGaussianPrx;

}

namespace RoboCompSocialNavigationGaussian
{

struct Pose2D
{
    float x;
    float z;
    float angle;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, z, angle);
    }
};

struct SNGPoint2D
{
    float x;
    float z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&> ice_tuple() const
    {
        return std::tie(x, z);
    }
};

struct SNGPerson
{
    float x;
    float z;
    float angle;
    float vel;
    int id;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const int&> ice_tuple() const
    {
        return std::tie(x, z, angle, vel, id);
    }
};

struct SNGObject
{
    float x;
    float z;
    float angle;
    float space;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, z, angle, space);
    }
};

using SNGPersonSeq = ::std::vector<SNGPerson>;

using SNGObjectSeq = ::std::vector<SNGObject>;

using SNGPolyline = ::std::vector<SNGPoint2D>;

using SNGPolylineSeq = ::std::vector<SNGPolyline>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompSocialNavigationGaussian
{

class SocialNavigationGaussian : public virtual ::Ice::Object
{
public:

    using ProxyType = SocialNavigationGaussianPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to getAllPersonalSpaces.
     */
    struct GetAllPersonalSpacesResult
    {
        SNGPolylineSeq intimateSpace;
        SNGPolylineSeq personalSpace;
        SNGPolylineSeq socialSpace;
    };

    virtual void getAllPersonalSpaces(SNGPersonSeq persons, float represent, SNGPolylineSeq& intimateSpace, SNGPolylineSeq& personalSpace, SNGPolylineSeq& socialSpace, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllPersonalSpaces(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SNGPolylineSeq getObjectInteraction(SNGPersonSeq persons, SNGObjectSeq objects, bool d, bool interact, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getObjectInteraction(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SNGPolylineSeq getPassOnRight(SNGPersonSeq persons, float v, bool d, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPassOnRight(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SNGPolylineSeq getPersonalSpace(SNGPersonSeq persons, float v, bool d, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPersonalSpace(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompSocialNavigationGaussian
{

class SocialNavigationGaussianPrx : public virtual ::Ice::Proxy<SocialNavigationGaussianPrx, ::Ice::ObjectPrx>
{
public:

    void getAllPersonalSpaces(const SNGPersonSeq& persons, float represent, SNGPolylineSeq& intimateSpace, SNGPolylineSeq& personalSpace, SNGPolylineSeq& socialSpace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<SocialNavigationGaussian::GetAllPersonalSpacesResult>(true, this, &SocialNavigationGaussianPrx::_iceI_getAllPersonalSpaces, persons, represent, context).get();
        intimateSpace = ::std::move(_result.intimateSpace);
        personalSpace = ::std::move(_result.personalSpace);
        socialSpace = ::std::move(_result.socialSpace);
    }

    template<template<typename> class P = ::std::promise>
    auto getAllPersonalSpacesAsync(const SNGPersonSeq& persons, float represent, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<SocialNavigationGaussian::GetAllPersonalSpacesResult>>().get_future())
    {
        return _makePromiseOutgoing<SocialNavigationGaussian::GetAllPersonalSpacesResult, P>(false, this, &SocialNavigationGaussianPrx::_iceI_getAllPersonalSpaces, persons, represent, context);
    }

    ::std::function<void()>
    getAllPersonalSpacesAsync(const SNGPersonSeq& persons, float represent,
                              ::std::function<void(::RoboCompSocialNavigationGaussian::SNGPolylineSeq, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](SocialNavigationGaussian::GetAllPersonalSpacesResult&& _result)
        {
            response(::std::move(_result.intimateSpace), ::std::move(_result.personalSpace), ::std::move(_result.socialSpace));
        };
        return _makeLamdaOutgoing<SocialNavigationGaussian::GetAllPersonalSpacesResult>(_responseCb, ex, sent, this, &RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getAllPersonalSpaces, persons, represent, context);
    }

    /// \cond INTERNAL
    void _iceI_getAllPersonalSpaces(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<SocialNavigationGaussian::GetAllPersonalSpacesResult>>&, const SNGPersonSeq&, float, const ::Ice::Context&);
    /// \endcond

    SNGPolylineSeq getObjectInteraction(const SNGPersonSeq& persons, const SNGObjectSeq& objects, bool d, bool interact, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>(true, this, &SocialNavigationGaussianPrx::_iceI_getObjectInteraction, persons, objects, d, interact, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getObjectInteractionAsync(const SNGPersonSeq& persons, const SNGObjectSeq& objects, bool d, bool interact, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq, P>(false, this, &SocialNavigationGaussianPrx::_iceI_getObjectInteraction, persons, objects, d, interact, context);
    }

    ::std::function<void()>
    getObjectInteractionAsync(const SNGPersonSeq& persons, const SNGObjectSeq& objects, bool d, bool interact,
                              ::std::function<void(::RoboCompSocialNavigationGaussian::SNGPolylineSeq)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>(response, ex, sent, this, &RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getObjectInteraction, persons, objects, d, interact, context);
    }

    /// \cond INTERNAL
    void _iceI_getObjectInteraction(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>&, const SNGPersonSeq&, const SNGObjectSeq&, bool, bool, const ::Ice::Context&);
    /// \endcond

    SNGPolylineSeq getPassOnRight(const SNGPersonSeq& persons, float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>(true, this, &SocialNavigationGaussianPrx::_iceI_getPassOnRight, persons, v, d, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPassOnRightAsync(const SNGPersonSeq& persons, float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq, P>(false, this, &SocialNavigationGaussianPrx::_iceI_getPassOnRight, persons, v, d, context);
    }

    ::std::function<void()>
    getPassOnRightAsync(const SNGPersonSeq& persons, float v, bool d,
                        ::std::function<void(::RoboCompSocialNavigationGaussian::SNGPolylineSeq)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>(response, ex, sent, this, &RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getPassOnRight, persons, v, d, context);
    }

    /// \cond INTERNAL
    void _iceI_getPassOnRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>&, const SNGPersonSeq&, float, bool, const ::Ice::Context&);
    /// \endcond

    SNGPolylineSeq getPersonalSpace(const SNGPersonSeq& persons, float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>(true, this, &SocialNavigationGaussianPrx::_iceI_getPersonalSpace, persons, v, d, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPersonalSpaceAsync(const SNGPersonSeq& persons, float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq, P>(false, this, &SocialNavigationGaussianPrx::_iceI_getPersonalSpace, persons, v, d, context);
    }

    ::std::function<void()>
    getPersonalSpaceAsync(const SNGPersonSeq& persons, float v, bool d,
                          ::std::function<void(::RoboCompSocialNavigationGaussian::SNGPolylineSeq)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>(response, ex, sent, this, &RoboCompSocialNavigationGaussian::SocialNavigationGaussianPrx::_iceI_getPersonalSpace, persons, v, d, context);
    }

    /// \cond INTERNAL
    void _iceI_getPersonalSpace(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompSocialNavigationGaussian::SNGPolylineSeq>>&, const SNGPersonSeq&, float, bool, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    SocialNavigationGaussianPrx() = default;
    friend ::std::shared_ptr<SocialNavigationGaussianPrx> IceInternal::createProxy<SocialNavigationGaussianPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompSocialNavigationGaussian::Pose2D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompSocialNavigationGaussian::Pose2D, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::Pose2D& v)
    {
        istr->readAll(v.x, v.z, v.angle);
    }
};

template<>
struct StreamableTraits<::RoboCompSocialNavigationGaussian::SNGPoint2D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompSocialNavigationGaussian::SNGPoint2D, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::SNGPoint2D& v)
    {
        istr->readAll(v.x, v.z);
    }
};

template<>
struct StreamableTraits<::RoboCompSocialNavigationGaussian::SNGPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompSocialNavigationGaussian::SNGPerson, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::SNGPerson& v)
    {
        istr->readAll(v.x, v.z, v.angle, v.vel, v.id);
    }
};

template<>
struct StreamableTraits<::RoboCompSocialNavigationGaussian::SNGObject>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompSocialNavigationGaussian::SNGObject, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::SNGObject& v)
    {
        istr->readAll(v.x, v.z, v.angle, v.space);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompSocialNavigationGaussian
{

using SocialNavigationGaussianPtr = ::std::shared_ptr<SocialNavigationGaussian>;
using SocialNavigationGaussianPrxPtr = ::std::shared_ptr<SocialNavigationGaussianPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompSocialNavigationGaussian
{

class SocialNavigationGaussian;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< SocialNavigationGaussian>&);
::IceProxy::Ice::Object* upCast(SocialNavigationGaussian*);
/// \endcond

}

}

namespace RoboCompSocialNavigationGaussian
{

class SocialNavigationGaussian;
/// \cond INTERNAL
::Ice::Object* upCast(SocialNavigationGaussian*);
/// \endcond
typedef ::IceInternal::Handle< SocialNavigationGaussian> SocialNavigationGaussianPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian> SocialNavigationGaussianPrx;
typedef SocialNavigationGaussianPrx SocialNavigationGaussianPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(SocialNavigationGaussianPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompSocialNavigationGaussian
{

struct Pose2D
{
    ::Ice::Float x;
    ::Ice::Float z;
    ::Ice::Float angle;
};

struct SNGPoint2D
{
    ::Ice::Float x;
    ::Ice::Float z;
};

struct SNGPerson
{
    ::Ice::Float x;
    ::Ice::Float z;
    ::Ice::Float angle;
    ::Ice::Float vel;
    ::Ice::Int id;
};

struct SNGObject
{
    ::Ice::Float x;
    ::Ice::Float z;
    ::Ice::Float angle;
    ::Ice::Float space;
};

typedef ::std::vector<SNGPerson> SNGPersonSeq;

typedef ::std::vector<SNGObject> SNGObjectSeq;

typedef ::std::vector<SNGPoint2D> SNGPolyline;

typedef ::std::vector<SNGPolyline> SNGPolylineSeq;

}

namespace RoboCompSocialNavigationGaussian
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getAllPersonalSpaces.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getAllPersonalSpaces.
 */
class Callback_SocialNavigationGaussian_getAllPersonalSpaces_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SocialNavigationGaussian_getAllPersonalSpaces_Base> Callback_SocialNavigationGaussian_getAllPersonalSpacesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getObjectInteraction.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getObjectInteraction.
 */
class Callback_SocialNavigationGaussian_getObjectInteraction_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SocialNavigationGaussian_getObjectInteraction_Base> Callback_SocialNavigationGaussian_getObjectInteractionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPassOnRight.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getPassOnRight.
 */
class Callback_SocialNavigationGaussian_getPassOnRight_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SocialNavigationGaussian_getPassOnRight_Base> Callback_SocialNavigationGaussian_getPassOnRightPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPersonalSpace.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getPersonalSpace.
 */
class Callback_SocialNavigationGaussian_getPersonalSpace_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SocialNavigationGaussian_getPersonalSpace_Base> Callback_SocialNavigationGaussian_getPersonalSpacePtr;

}

namespace IceProxy
{

namespace RoboCompSocialNavigationGaussian
{

class SocialNavigationGaussian : public virtual ::Ice::Proxy<SocialNavigationGaussian, ::IceProxy::Ice::Object>
{
public:

    void getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float represent, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& intimateSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& personalSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& socialSpace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getAllPersonalSpaces(intimateSpace, personalSpace, socialSpace, _iceI_begin_getAllPersonalSpaces(persons, represent, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float represent, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllPersonalSpaces(persons, represent, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float represent, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllPersonalSpaces(persons, represent, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float represent, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllPersonalSpaces(persons, represent, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float represent, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getAllPersonalSpacesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllPersonalSpaces(persons, represent, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float represent, const ::Ice::Context& context, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getAllPersonalSpacesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllPersonalSpaces(persons, represent, context, cb, cookie);
    }

    void end_getAllPersonalSpaces(::RoboCompSocialNavigationGaussian::SNGPolylineSeq& intimateSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& personalSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& socialSpace, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getAllPersonalSpaces(::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_intimateSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_personalSpace, ::RoboCompSocialNavigationGaussian::SNGPolylineSeq& iceP_socialSpace, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllPersonalSpaces(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq&, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq& objects, bool d, bool interact, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getObjectInteraction(_iceI_begin_getObjectInteraction(persons, objects, d, interact, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq& objects, bool d, bool interact, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getObjectInteraction(persons, objects, d, interact, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq& objects, bool d, bool interact, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObjectInteraction(persons, objects, d, interact, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq& objects, bool d, bool interact, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObjectInteraction(persons, objects, d, interact, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq& objects, bool d, bool interact, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getObjectInteractionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObjectInteraction(persons, objects, d, interact, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq& objects, bool d, bool interact, const ::Ice::Context& context, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getObjectInteractionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObjectInteraction(persons, objects, d, interact, context, cb, cookie);
    }

    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq end_getObjectInteraction(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getObjectInteraction(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq&, const ::RoboCompSocialNavigationGaussian::SNGObjectSeq&, bool, bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPassOnRight(_iceI_begin_getPassOnRight(persons, v, d, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPassOnRight(persons, v, d, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassOnRight(persons, v, d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassOnRight(persons, v, d, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getPassOnRightPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassOnRight(persons, v, d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getPassOnRightPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPassOnRight(persons, v, d, context, cb, cookie);
    }

    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq end_getPassOnRight(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPassOnRight(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq&, ::Ice::Float, bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPersonalSpace(_iceI_begin_getPersonalSpace(persons, v, d, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPersonalSpace(persons, v, d, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPersonalSpace(persons, v, d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPersonalSpace(persons, v, d, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getPersonalSpacePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPersonalSpace(persons, v, d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Context& context, const ::RoboCompSocialNavigationGaussian::Callback_SocialNavigationGaussian_getPersonalSpacePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPersonalSpace(persons, v, d, context, cb, cookie);
    }

    ::RoboCompSocialNavigationGaussian::SNGPolylineSeq end_getPersonalSpace(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPersonalSpace(const ::RoboCompSocialNavigationGaussian::SNGPersonSeq&, ::Ice::Float, bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompSocialNavigationGaussian
{

class SocialNavigationGaussian : public virtual ::Ice::Object
{
public:

    typedef SocialNavigationGaussianPrx ProxyType;
    typedef SocialNavigationGaussianPtr PointerType;

    virtual ~SocialNavigationGaussian();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void getAllPersonalSpaces(const SNGPersonSeq& persons, ::Ice::Float represent, SNGPolylineSeq& intimateSpace, SNGPolylineSeq& personalSpace, SNGPolylineSeq& socialSpace, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAllPersonalSpaces(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SNGPolylineSeq getObjectInteraction(const SNGPersonSeq& persons, const SNGObjectSeq& objects, bool d, bool interact, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getObjectInteraction(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SNGPolylineSeq getPassOnRight(const SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPassOnRight(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SNGPolylineSeq getPersonalSpace(const SNGPersonSeq& persons, ::Ice::Float v, bool d, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPersonalSpace(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const SocialNavigationGaussian& lhs, const SocialNavigationGaussian& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const SocialNavigationGaussian& lhs, const SocialNavigationGaussian& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompSocialNavigationGaussian::Pose2D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompSocialNavigationGaussian::Pose2D, S>
{
    static void write(S* ostr, const ::RoboCompSocialNavigationGaussian::Pose2D& v)
    {
        ostr->write(v.x);
        ostr->write(v.z);
        ostr->write(v.angle);
    }
};

template<typename S>
struct StreamReader< ::RoboCompSocialNavigationGaussian::Pose2D, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::Pose2D& v)
    {
        istr->read(v.x);
        istr->read(v.z);
        istr->read(v.angle);
    }
};

template<>
struct StreamableTraits< ::RoboCompSocialNavigationGaussian::SNGPoint2D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompSocialNavigationGaussian::SNGPoint2D, S>
{
    static void write(S* ostr, const ::RoboCompSocialNavigationGaussian::SNGPoint2D& v)
    {
        ostr->write(v.x);
        ostr->write(v.z);
    }
};

template<typename S>
struct StreamReader< ::RoboCompSocialNavigationGaussian::SNGPoint2D, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::SNGPoint2D& v)
    {
        istr->read(v.x);
        istr->read(v.z);
    }
};

template<>
struct StreamableTraits< ::RoboCompSocialNavigationGaussian::SNGPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompSocialNavigationGaussian::SNGPerson, S>
{
    static void write(S* ostr, const ::RoboCompSocialNavigationGaussian::SNGPerson& v)
    {
        ostr->write(v.x);
        ostr->write(v.z);
        ostr->write(v.angle);
        ostr->write(v.vel);
        ostr->write(v.id);
    }
};

template<typename S>
struct StreamReader< ::RoboCompSocialNavigationGaussian::SNGPerson, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::SNGPerson& v)
    {
        istr->read(v.x);
        istr->read(v.z);
        istr->read(v.angle);
        istr->read(v.vel);
        istr->read(v.id);
    }
};

template<>
struct StreamableTraits< ::RoboCompSocialNavigationGaussian::SNGObject>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompSocialNavigationGaussian::SNGObject, S>
{
    static void write(S* ostr, const ::RoboCompSocialNavigationGaussian::SNGObject& v)
    {
        ostr->write(v.x);
        ostr->write(v.z);
        ostr->write(v.angle);
        ostr->write(v.space);
    }
};

template<typename S>
struct StreamReader< ::RoboCompSocialNavigationGaussian::SNGObject, S>
{
    static void read(S* istr, ::RoboCompSocialNavigationGaussian::SNGObject& v)
    {
        istr->read(v.x);
        istr->read(v.z);
        istr->read(v.angle);
        istr->read(v.space);
    }
};

}
/// \endcond

namespace RoboCompSocialNavigationGaussian
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getAllPersonalSpaces.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getAllPersonalSpaces.
 */
template<class T>
class CallbackNC_SocialNavigationGaussian_getAllPersonalSpaces : public Callback_SocialNavigationGaussian_getAllPersonalSpaces_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SNGPolylineSeq&, const SNGPolylineSeq&, const SNGPolylineSeq&);

    CallbackNC_SocialNavigationGaussian_getAllPersonalSpaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq iceP_intimateSpace;
        SNGPolylineSeq iceP_personalSpace;
        SNGPolylineSeq iceP_socialSpace;
        try
        {
            proxy->end_getAllPersonalSpaces(iceP_intimateSpace, iceP_personalSpace, iceP_socialSpace, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_intimateSpace, iceP_personalSpace, iceP_socialSpace);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getAllPersonalSpaces.
 */
template<class T> Callback_SocialNavigationGaussian_getAllPersonalSpacesPtr
newCallback_SocialNavigationGaussian_getAllPersonalSpaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&, const SNGPolylineSeq&, const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getAllPersonalSpaces<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getAllPersonalSpaces.
 */
template<class T> Callback_SocialNavigationGaussian_getAllPersonalSpacesPtr
newCallback_SocialNavigationGaussian_getAllPersonalSpaces(T* instance, void (T::*cb)(const SNGPolylineSeq&, const SNGPolylineSeq&, const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getAllPersonalSpaces<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getAllPersonalSpaces.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getAllPersonalSpaces.
 */
template<class T, typename CT>
class Callback_SocialNavigationGaussian_getAllPersonalSpaces : public Callback_SocialNavigationGaussian_getAllPersonalSpaces_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SNGPolylineSeq&, const SNGPolylineSeq&, const SNGPolylineSeq&, const CT&);

    Callback_SocialNavigationGaussian_getAllPersonalSpaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq iceP_intimateSpace;
        SNGPolylineSeq iceP_personalSpace;
        SNGPolylineSeq iceP_socialSpace;
        try
        {
            proxy->end_getAllPersonalSpaces(iceP_intimateSpace, iceP_personalSpace, iceP_socialSpace, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_intimateSpace, iceP_personalSpace, iceP_socialSpace, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getAllPersonalSpaces.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getAllPersonalSpacesPtr
newCallback_SocialNavigationGaussian_getAllPersonalSpaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&, const SNGPolylineSeq&, const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getAllPersonalSpaces<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getAllPersonalSpaces.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getAllPersonalSpacesPtr
newCallback_SocialNavigationGaussian_getAllPersonalSpaces(T* instance, void (T::*cb)(const SNGPolylineSeq&, const SNGPolylineSeq&, const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getAllPersonalSpaces<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getObjectInteraction.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getObjectInteraction.
 */
template<class T>
class CallbackNC_SocialNavigationGaussian_getObjectInteraction : public Callback_SocialNavigationGaussian_getObjectInteraction_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SNGPolylineSeq&);

    CallbackNC_SocialNavigationGaussian_getObjectInteraction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq ret;
        try
        {
            ret = proxy->end_getObjectInteraction(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getObjectInteraction.
 */
template<class T> Callback_SocialNavigationGaussian_getObjectInteractionPtr
newCallback_SocialNavigationGaussian_getObjectInteraction(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getObjectInteraction<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getObjectInteraction.
 */
template<class T> Callback_SocialNavigationGaussian_getObjectInteractionPtr
newCallback_SocialNavigationGaussian_getObjectInteraction(T* instance, void (T::*cb)(const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getObjectInteraction<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getObjectInteraction.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getObjectInteraction.
 */
template<class T, typename CT>
class Callback_SocialNavigationGaussian_getObjectInteraction : public Callback_SocialNavigationGaussian_getObjectInteraction_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SNGPolylineSeq&, const CT&);

    Callback_SocialNavigationGaussian_getObjectInteraction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq ret;
        try
        {
            ret = proxy->end_getObjectInteraction(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getObjectInteraction.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getObjectInteractionPtr
newCallback_SocialNavigationGaussian_getObjectInteraction(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getObjectInteraction<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getObjectInteraction.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getObjectInteractionPtr
newCallback_SocialNavigationGaussian_getObjectInteraction(T* instance, void (T::*cb)(const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getObjectInteraction<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPassOnRight.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getPassOnRight.
 */
template<class T>
class CallbackNC_SocialNavigationGaussian_getPassOnRight : public Callback_SocialNavigationGaussian_getPassOnRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SNGPolylineSeq&);

    CallbackNC_SocialNavigationGaussian_getPassOnRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq ret;
        try
        {
            ret = proxy->end_getPassOnRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPassOnRight.
 */
template<class T> Callback_SocialNavigationGaussian_getPassOnRightPtr
newCallback_SocialNavigationGaussian_getPassOnRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getPassOnRight<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPassOnRight.
 */
template<class T> Callback_SocialNavigationGaussian_getPassOnRightPtr
newCallback_SocialNavigationGaussian_getPassOnRight(T* instance, void (T::*cb)(const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getPassOnRight<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPassOnRight.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getPassOnRight.
 */
template<class T, typename CT>
class Callback_SocialNavigationGaussian_getPassOnRight : public Callback_SocialNavigationGaussian_getPassOnRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SNGPolylineSeq&, const CT&);

    Callback_SocialNavigationGaussian_getPassOnRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq ret;
        try
        {
            ret = proxy->end_getPassOnRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPassOnRight.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getPassOnRightPtr
newCallback_SocialNavigationGaussian_getPassOnRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getPassOnRight<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPassOnRight.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getPassOnRightPtr
newCallback_SocialNavigationGaussian_getPassOnRight(T* instance, void (T::*cb)(const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getPassOnRight<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPersonalSpace.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getPersonalSpace.
 */
template<class T>
class CallbackNC_SocialNavigationGaussian_getPersonalSpace : public Callback_SocialNavigationGaussian_getPersonalSpace_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SNGPolylineSeq&);

    CallbackNC_SocialNavigationGaussian_getPersonalSpace(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq ret;
        try
        {
            ret = proxy->end_getPersonalSpace(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPersonalSpace.
 */
template<class T> Callback_SocialNavigationGaussian_getPersonalSpacePtr
newCallback_SocialNavigationGaussian_getPersonalSpace(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getPersonalSpace<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPersonalSpace.
 */
template<class T> Callback_SocialNavigationGaussian_getPersonalSpacePtr
newCallback_SocialNavigationGaussian_getPersonalSpace(T* instance, void (T::*cb)(const SNGPolylineSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SocialNavigationGaussian_getPersonalSpace<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPersonalSpace.
 * Create a wrapper instance by calling ::RoboCompSocialNavigationGaussian::newCallback_SocialNavigationGaussian_getPersonalSpace.
 */
template<class T, typename CT>
class Callback_SocialNavigationGaussian_getPersonalSpace : public Callback_SocialNavigationGaussian_getPersonalSpace_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SNGPolylineSeq&, const CT&);

    Callback_SocialNavigationGaussian_getPersonalSpace(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SocialNavigationGaussianPrx proxy = SocialNavigationGaussianPrx::uncheckedCast(result->getProxy());
        SNGPolylineSeq ret;
        try
        {
            ret = proxy->end_getPersonalSpace(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPersonalSpace.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getPersonalSpacePtr
newCallback_SocialNavigationGaussian_getPersonalSpace(const IceUtil::Handle<T>& instance, void (T::*cb)(const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getPersonalSpace<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSocialNavigationGaussian::SocialNavigationGaussian::begin_getPersonalSpace.
 */
template<class T, typename CT> Callback_SocialNavigationGaussian_getPersonalSpacePtr
newCallback_SocialNavigationGaussian_getPersonalSpace(T* instance, void (T::*cb)(const SNGPolylineSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SocialNavigationGaussian_getPersonalSpace<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
